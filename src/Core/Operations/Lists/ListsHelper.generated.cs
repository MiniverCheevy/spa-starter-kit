//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
using System;
using Voodoo;
using System.Data.Entity;
using System.Threading.Tasks;

using Fernweh.Core;
using Voodoo.Messages;
using System.Collections.Generic;
using System.Linq;
using Fernweh.Core.Context;

namespace Fernweh.Core.Operations.Lists
{
    public class ListsHelper
    {
        public async Task<List<IListItem>> GetList(Context.AppContext context, Lists list, bool includeInactive = false)
        {
            var response = new List<IListItem>();
            var items = new List<ListItem>();
            IList<IListItem> enumItems = new List<IListItem>();
            Type enumType=null;
            
            if(list == Lists.Role)
            {
                var queryRoles = context.Roles.AsNoTracking().AsQueryable();
                queryRoles=queryRoles.OrderBy(c=>c.Name);
                items = await queryRoles
                .Select (c=>new ListItem{Name = c.Name, Value=c.Id})
                .ToListAsync();
                
            }
            if(list == Lists.Lists)
            {
                enumType = typeof(Fernweh.Core.Operations.Lists.Lists);
                enumItems = enumType.ToINameValuePairList().Select(c=>(IListItem)new ListItem { Name = c.Name, Value = c.Value.To<int>() }).ToList ();
                response.AddRange(enumItems);
            }
            if(list == Lists.SqlOperation)
            {
                enumType = typeof(Fernweh.Core.Context.SqlOperation);
                enumItems = enumType.ToINameValuePairList().Select(c=>(IListItem)new ListItem { Name = c.Name, Value = c.Value.To<int>() }).ToList ();
                response.AddRange(enumItems);
            }
            
            response.AddRange(items);
            return response;
        }
        
        public async Task<ListsResponse> GetLists(Context.AppContext context, ListsRequest request)
        {
            Type enumType=null;
            var response = new ListsResponse();
            var items = new List<ListItem>();
            IList<IListItem> enumItems = new List<IListItem>();
            if(request.Lists.Contains(Lists.Role))
            {
                var queryRoles = context.Roles.AsNoTracking().AsQueryable();
                queryRoles=queryRoles.OrderBy(c=>c.Name);
                items = await queryRoles
                .Select (c=>new ListItem{Name = c.Name, Value=c.Id})
                .ToListAsync();
                response.Roles.AddRange(items);
            }
            if(request.Lists.Contains(Lists.Lists))
            {
                enumType = typeof(Fernweh.Core.Operations.Lists.Lists);
                enumItems = enumType.ToINameValuePairList().Select(c=>(IListItem)new ListItem { Name = c.Name, Value = c.Value.To<int>() }).ToList ();
                response.Lists.AddRange(enumItems);
                
            }
            if(request.Lists.Contains(Lists.SqlOperation))
            {
                enumType = typeof(Fernweh.Core.Context.SqlOperation);
                enumItems = enumType.ToINameValuePairList().Select(c=>(IListItem)new ListItem { Name = c.Name, Value = c.Value.To<int>() }).ToList ();
                response.SqlOperations.AddRange(enumItems);
                
            }
            
            return response;
        }
    }
}
