//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
import * as Models from './models.generated';
import { MessengerService }
from './services/messenger-service';
import { EncoderService }
from './services/encoder-service';
import { AjaxService }
from './services/ajax-service';
import { Injectable }   from '@angular/core';
@Injectable()
export class ApplicationSetting
{
    url: string = 'api/ApplicationSetting';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async delete (request: Models.IdRequest):
    Promise<Models.Response>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildDeleteRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
public async put (request: Models.ApplicationSettingDetail):
Promise<Models.NewItemResponse>
{
    this.messenger.incrementHttpRequestCounter();
    try {
    var response = await this.ajaxService.buildPutRequest(request, this.url);
    this.messenger.decrementHttpRequestCounter();
    var out = <any>response;
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    var message = err.statusText || err.message;
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    var result = {
    isOk: false,
    message: message
};
this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
public async get (request: Models.IdRequest):
Promise<Models.ResponseOfApplicationSettingDetail>
{
    this.messenger.incrementHttpRequestCounter();
    try {
    var response = await this.ajaxService.buildGetRequest(request, this.url);
    this.messenger.decrementHttpRequestCounter();
    var out = <any>response;
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    var message = err.statusText || err.message;
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    var result = {
    isOk: false,
    message: message
};
this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
}
@Injectable()
export class ApplicationSettingList
{
    url: string = 'api/ApplicationSettingList';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.ApplicationSettingListRequest):
    Promise<Models.ApplicationSettingListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class CurrentUser
{
    url: string = 'api/CurrentUser';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.EmptyRequest):
    Promise<Models.ResponseOfAppPrincipal>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class ErrorDetail
{
    url: string = 'api/ErrorDetail';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.IdRequest):
    Promise<Models.ResponseOfErrorDetail>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class ErrorList
{
    url: string = 'api/ErrorList';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.ErrorListRequest):
    Promise<Models.ErrorListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class Lists
{
    url: string = 'api/Lists';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.ListsRequest):
    Promise<Models.ListsResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class Member
{
    url: string = 'api/Member';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async delete (request: Models.IdRequest):
    Promise<Models.Response>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildDeleteRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
public async get (request: Models.IdRequest):
Promise<Models.ResponseOfMemberDetail>
{
    this.messenger.incrementHttpRequestCounter();
    try {
    var response = await this.ajaxService.buildGetRequest(request, this.url);
    this.messenger.decrementHttpRequestCounter();
    var out = <any>response;
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    var message = err.statusText || err.message;
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    var result = {
    isOk: false,
    message: message
};
this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
public async put (request: Models.MemberDetail):
Promise<Models.NewItemResponse>
{
    this.messenger.incrementHttpRequestCounter();
    try {
    var response = await this.ajaxService.buildPutRequest(request, this.url);
    this.messenger.decrementHttpRequestCounter();
    var out = <any>response;
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    var message = err.statusText || err.message;
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    var result = {
    isOk: false,
    message: message
};
this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
}
@Injectable()
export class MemberList
{
    url: string = 'api/MemberList';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.MemberListRequest):
    Promise<Models.MemberListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class MobileError
{
    url: string = 'api/MobileError';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async post (request: Models.MobileErrorRequest):
    Promise<Models.Response>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildPostRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@Injectable()
export class UserDetail
{
    url: string = 'api/UserDetail';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async delete (request: Models.IdRequest):
    Promise<Models.Response>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildDeleteRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
public async get (request: Models.IdRequest):
Promise<Models.ResponseOfUserDetail>
{
    this.messenger.incrementHttpRequestCounter();
    try {
    var response = await this.ajaxService.buildGetRequest(request, this.url);
    this.messenger.decrementHttpRequestCounter();
    var out = <any>response;
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    var message = err.statusText || err.message;
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    var result = {
    isOk: false,
    message: message
};
this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
public async put (request: Models.UserDetail):
Promise<Models.NewItemResponse>
{
    this.messenger.incrementHttpRequestCounter();
    try {
    var response = await this.ajaxService.buildPutRequest(request, this.url);
    this.messenger.decrementHttpRequestCounter();
    var out = <any>response;
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    var message = err.statusText || err.message;
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    var result = {
    isOk: false,
    message: message
};
this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
}
@Injectable()
export class UserList
{
    url: string = 'api/UserList';
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    public async get (request: Models.UserListRequest):
    Promise<Models.UserListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        try {
        var response = await this.ajaxService.buildGetRequest(request, this.url);
        this.messenger.decrementHttpRequestCounter();
        var out = <any>response;
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        var message = err.statusText || err.message;
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        var result = {
        isOk: false,
        message: message
    };
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
export const providers =[
ApplicationSetting,
ApplicationSettingList,
CurrentUser,
ErrorDetail,
ErrorList,
Lists,
Member,
MemberList,
MobileError,
UserDetail,
UserList
];

