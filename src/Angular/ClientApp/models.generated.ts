//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************

export interface IGroupingOfNameValuePair  {
name? : string;
id? : any;
data? : INameValuePair[];
}

export const EmptyIGroupingOfNameValuePair =
{
    name:undefined,
    id:undefined,
    data:undefined
}

export const IGroupingOfNameValuePairMetadata =
{
    name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
    }
    ,id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text'
    }
    ,data:
    {
        propertyName:'Data',
        displayName:'Data',
        displayFormat:'text'
    }
}

export const INameValuePairMetadata =
{
    name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
    }
    ,value:
    {
        propertyName:'Value',
        displayName:'Value',
        displayFormat:'text'
    }
}

export interface INameValuePair  {
name? : string;
value? : string;
}

export const EmptyINameValuePair =
{
    name:undefined,
    value:undefined
}

export interface IApplicationSettingDetail  {
id? : number;
name? : string;
value? : string;
}

export const EmptyIApplicationSettingDetail =
{
    id:undefined,
    name:undefined,
    value:undefined
}

export const IApplicationSettingDetailMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text',
        isHidden: true
        ,int:
        {
            shouldValidate:true
        }
    }
    ,name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
    }
    ,value:
    {
        propertyName:'Value',
        displayName:'Value',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
}

export interface IApplicationSettingListRequest  {
defaultSortMember? : string;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIApplicationSettingListRequest =
{
    defaultSortMember:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IApplicationSettingListRequestMetadata =
{
    defaultSortMember:
    {
        propertyName:'DefaultSortMember',
        displayName:'Default Sort Member',
        displayFormat:'text'
    }
    ,}
    
    export interface IApplicationSettingListResponse extends IResponse {
    state? : IGridState;
    data? : IApplicationSettingRow[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIApplicationSettingListResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IGridStateMetadata =
{
    pageNumber:
    {
        propertyName:'PageNumber',
        displayName:'Page Number',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,pageSize:
    {
        propertyName:'PageSize',
        displayName:'Page Size',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,totalRecords:
    {
        propertyName:'TotalRecords',
        displayName:'Total Records',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,totalPages:
    {
        propertyName:'TotalPages',
        displayName:'Total Pages',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,sortMember:
    {
        propertyName:'SortMember',
        displayName:'Sort Member',
        displayFormat:'text'
    }
    ,sortDirection:
    {
        propertyName:'SortDirection',
        displayName:'Sort Direction',
        displayFormat:'text'
    }
    ,defaultSortMember:
    {
        propertyName:'DefaultSortMember',
        displayName:'Default Sort Member',
        displayFormat:'text'
    }
    ,resetPaging:
    {
        propertyName:'ResetPaging',
        displayName:'Reset Paging',
        displayFormat:'text'
    }
}

export interface IGridState  {
pageNumber? : number;
pageSize? : number;
totalRecords? : number;
totalPages? : number;
sortMember? : string;
sortDirection? : string;
defaultSortMember? : string;
resetPaging? : boolean;
}

export const EmptyIGridState =
{
    pageNumber:undefined,
    pageSize:undefined,
    totalRecords:undefined,
    totalPages:undefined,
    sortMember:undefined,
    sortDirection:undefined,
    defaultSortMember:undefined,
    resetPaging:undefined
}

export const IApplicationSettingRowMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text',
        isHidden: true
        ,int:
        {
            shouldValidate:true
        }
    }
    ,name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
    }
    ,value:
    {
        propertyName:'Value',
        displayName:'Value',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
}

export interface IApplicationSettingRow  {
id? : number;
name? : string;
value? : string;
}

export const EmptyIApplicationSettingRow =
{
    id:undefined,
    name:undefined,
    value:undefined
}

export const INameValuePairMetadata =
{
    name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
    }
    ,value:
    {
        propertyName:'Value',
        displayName:'Value',
        displayFormat:'text'
    }
}

export interface IAppPrincipal  {
expiration? : Date;
refreshTime? : Date;
isAuthenticated? : boolean;
userName? : string;
userId? : number;
firstName? : string;
lastName? : string;
roles? : string[];
isAdmin? : boolean;
token? : string;
}

export const EmptyIAppPrincipal =
{
    expiration:undefined,
    refreshTime:undefined,
    isAuthenticated:undefined,
    userName:undefined,
    userId:undefined,
    firstName:undefined,
    lastName:undefined,
    roles:undefined,
    isAdmin:undefined,
    token:undefined
}

export const IAppPrincipalMetadata =
{
    expiration:
    {
        propertyName:'Expiration',
        displayName:'Expiration',
        displayFormat:'date'
        ,date:
        {
            shouldValidate:true
        }
    }
    ,refreshTime:
    {
        propertyName:'RefreshTime',
        displayName:'Refresh Time',
        displayFormat:'date'
        ,date:
        {
            shouldValidate:true
        }
    }
    ,isAuthenticated:
    {
        propertyName:'IsAuthenticated',
        displayName:'Is Authenticated',
        displayFormat:'text'
    }
    ,userName:
    {
        propertyName:'UserName',
        displayName:'User Name',
        displayFormat:'text'
    }
    ,userId:
    {
        propertyName:'UserId',
        displayName:'User Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,firstName:
    {
        propertyName:'FirstName',
        displayName:'First Name',
        displayFormat:'text'
    }
    ,lastName:
    {
        propertyName:'LastName',
        displayName:'Last Name',
        displayFormat:'text'
    }
    ,roles:
    {
        propertyName:'Roles',
        displayName:'Roles',
        displayFormat:'text'
    }
    ,isAdmin:
    {
        propertyName:'IsAdmin',
        displayName:'Is Admin',
        displayFormat:'text'
    }
    ,token:
    {
        propertyName:'Token',
        displayName:'Token',
        displayFormat:'text'
    }
}

export interface IClientInfo  {
timeZoneOffsetInMinutes? : number;
}

export const EmptyIClientInfo =
{
    timeZoneOffsetInMinutes:undefined
}

export const IClientInfoMetadata =
{
    timeZoneOffsetInMinutes:
    {
        propertyName:'TimeZoneOffsetInMinutes',
        displayName:'Time Zone Offset In Minutes',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
}

export interface IEmptyRequest  {
}

export const EmptyIEmptyRequest =
{
}

export const IEmptyRequestMetadata =
{
}

export interface IErrorListRequest  {
searchText? : string;
defaultSortMember? : string;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIErrorListRequest =
{
    searchText:undefined,
    defaultSortMember:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IErrorListRequestMetadata =
{
    searchText:
    {
        propertyName:'SearchText',
        displayName:'Search Text',
        displayFormat:'text'
    }
    ,defaultSortMember:
    {
        propertyName:'DefaultSortMember',
        displayName:'Default Sort Member',
        displayFormat:'text'
    }
    ,}
    
    export interface IErrorListResponse extends IResponse {
    state? : IGridState;
    data? : IErrorRow[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIErrorListResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IErrorRowMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,creationDate:
    {
        propertyName:'CreationDate',
        displayName:'Creation Date',
        displayFormat:'date'
        ,date:
        {
            shouldValidate:true
            ,min: new Date('1/1/1900')
            ,max: new Date('3/4/2050')
            ,message: 'date is either too far in the future or past'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,type:
    {
        propertyName:'Type',
        displayName:'Type',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 200
            ,message: '200 characters or less'
        }
    }
    ,message:
    {
        propertyName:'Message',
        displayName:'Message',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 200
            ,message: '200 characters or less'
        }
    }
    ,user:
    {
        propertyName:'User',
        displayName:'User',
        displayFormat:'text'
    }
}

export interface IErrorRow  {
id? : number;
creationDate? : Date;
type? : string;
message? : string;
user? : string;
}

export const EmptyIErrorRow =
{
    id:undefined,
    creationDate:undefined,
    type:undefined,
    message:undefined,
    user:undefined
}

export interface IIdRequest  {
id? : number;
}

export const EmptyIIdRequest =
{
    id:undefined
}

export const IIdRequestMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
}

export enum Lists  {
Role = 1,
Lists = 2,
SqlOperation = 3
}
export const ListsMetadata =
{
}

export interface IListsRequest  {
includeInactive? : boolean;
lists? : Lists[];
}

export const EmptyIListsRequest =
{
    includeInactive:undefined,
    lists:undefined
}

export const IListsRequestMetadata =
{
    includeInactive:
    {
        propertyName:'IncludeInactive',
        displayName:'Include Inactive',
        displayFormat:'text'
    }
    ,lists:
    {
        propertyName:'Lists',
        displayName:'Lists',
        displayFormat:'text'
    }
}

export interface IListsResponse extends IResponse {
roles? : IListItem[];
lists? : IListItem[];
sqlOperations? : IListItem[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIListsResponse =
{
    roles:undefined,
    lists:undefined,
    sqlOperations:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IListItemMetadata =
{
    value:
    {
        propertyName:'Value',
        displayName:'Value',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
    }
}

export interface IListItem  {
value? : number;
name? : string;
}

export const EmptyIListItem =
{
    value:undefined,
    name:undefined
}

export interface IMemberDetail  {
id? : number;
name? : string;
title? : string;
requiredInt? : number;
optionalInt? : number;
requiredDate? : Date;
optionalDate? : Date;
requiredDecimal? : number;
optionalDecimal? : number;
managerId? : number;
}

export const EmptyIMemberDetail =
{
    id:undefined,
    name:undefined,
    title:undefined,
    requiredInt:undefined,
    optionalInt:undefined,
    requiredDate:undefined,
    optionalDate:undefined,
    requiredDecimal:undefined,
    optionalDecimal:undefined,
    managerId:undefined
}

export const IMemberDetailMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text',
        isHidden: true
        ,int:
        {
            shouldValidate:true
        }
    }
    ,name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
    }
    ,title:
    {
        propertyName:'Title',
        displayName:'Title',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,requiredInt:
    {
        propertyName:'RequiredInt',
        displayName:'Required Int',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,optionalInt:
    {
        propertyName:'OptionalInt',
        displayName:'Optional Int',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,requiredDate:
    {
        propertyName:'RequiredDate',
        displayName:'Required Date',
        displayFormat:'date'
        ,date:
        {
            shouldValidate:true
            ,min: new Date('1/1/1900')
            ,max: new Date('3/4/2050')
            ,message: 'date is either too far in the future or past'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,optionalDate:
    {
        propertyName:'OptionalDate',
        displayName:'Optional Date',
        displayFormat:'date'
        ,date:
        {
            shouldValidate:true
            ,min: new Date('1/1/1900')
            ,max: new Date('3/4/2050')
            ,message: 'date is either too far in the future or past'
        }
    }
    ,requiredDecimal:
    {
        propertyName:'RequiredDecimal',
        displayName:'Required Decimal',
        displayFormat:'decimal'
        ,decimal:
        {
            shouldValidate:true
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,optionalDecimal:
    {
        propertyName:'OptionalDecimal',
        displayName:'Optional Decimal',
        displayFormat:'decimal'
        ,decimal:
        {
            shouldValidate:true
        }
    }
    ,managerId:
    {
        propertyName:'ManagerId',
        displayName:'Manager',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
}

export interface IMemberListRequest  {
defaultSortMember? : string;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIMemberListRequest =
{
    defaultSortMember:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IMemberListRequestMetadata =
{
    defaultSortMember:
    {
        propertyName:'DefaultSortMember',
        displayName:'Default Sort Member',
        displayFormat:'text'
    }
    ,}
    
    export interface IMemberListResponse extends IResponse {
    state? : IGridState;
    data? : IMemberRow[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIMemberListResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IMemberRowMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text',
        isHidden: true
        ,int:
        {
            shouldValidate:true
        }
    }
    ,name:
    {
        propertyName:'Name',
        displayName:'Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
    }
    ,title:
    {
        propertyName:'Title',
        displayName:'Title',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,requiredInt:
    {
        propertyName:'RequiredInt',
        displayName:'Required Int',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,optionalInt:
    {
        propertyName:'OptionalInt',
        displayName:'Optional Int',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
}

export interface IMemberRow  {
id? : number;
name? : string;
title? : string;
requiredInt? : number;
optionalInt? : number;
}

export const EmptyIMemberRow =
{
    id:undefined,
    name:undefined,
    title:undefined,
    requiredInt:undefined,
    optionalInt:undefined
}

export interface IMobileErrorRequest  {
errorMsg? : string;
url? : string;
lineNumber? : string;
column? : string;
errorObject? : string;
}

export const EmptyIMobileErrorRequest =
{
    errorMsg:undefined,
    url:undefined,
    lineNumber:undefined,
    column:undefined,
    errorObject:undefined
}

export const IMobileErrorRequestMetadata =
{
    errorMsg:
    {
        propertyName:'ErrorMsg',
        displayName:'Error Msg',
        displayFormat:'text'
    }
    ,url:
    {
        propertyName:'Url',
        displayName:'Url',
        displayFormat:'text'
    }
    ,lineNumber:
    {
        propertyName:'LineNumber',
        displayName:'Line Number',
        displayFormat:'text'
    }
    ,column:
    {
        propertyName:'Column',
        displayName:'Column',
        displayFormat:'text'
    }
    ,errorObject:
    {
        propertyName:'ErrorObject',
        displayName:'Error Object',
        displayFormat:'text'
    }
}

export interface INewItemResponse extends IResponse {
newItemId? : number;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyINewItemResponse =
{
    newItemId:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponse  {
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponse =
{
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponseOfUserDetail extends IResponse {
data? : IUserDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfUserDetail =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IUserDetailMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text',
        isHidden: true
        ,int:
        {
            shouldValidate:true
        }
    }
    ,userName:
    {
        propertyName:'UserName',
        displayName:'User Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,clientId:
    {
        propertyName:'ClientId',
        displayName:'Client Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,firstName:
    {
        propertyName:'FirstName',
        displayName:'First Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,lastName:
    {
        propertyName:'LastName',
        displayName:'Last Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,lockoutEnabled:
    {
        propertyName:'LockoutEnabled',
        displayName:'Lockout Enabled',
        displayFormat:'text'
        ,required:
        {
            shouldValidate:true
        }
    }
    ,password:
    {
        propertyName:'Password',
        displayName:'Password',
        displayFormat:'text'
    }
    ,confirmPassword:
    {
        propertyName:'ConfirmPassword',
        displayName:'Confirm Password',
        displayFormat:'text'
    }
    ,roles:
    {
        propertyName:'Roles',
        displayName:'Roles',
        displayFormat:'text'
    }
}

export interface IUserDetail  {
id? : number;
userName? : string;
clientId? : number;
firstName? : string;
lastName? : string;
lockoutEnabled? : boolean;
password? : string;
confirmPassword? : string;
roles? : IListItem[];
}

export const EmptyIUserDetail =
{
    id:undefined,
    userName:undefined,
    clientId:undefined,
    firstName:undefined,
    lastName:undefined,
    lockoutEnabled:undefined,
    password:undefined,
    confirmPassword:undefined,
    roles:undefined
}

export interface IResponseOfMemberDetail extends IResponse {
data? : IMemberDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfMemberDetail =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponseOfErrorDetail extends IResponse {
data? : IErrorDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfErrorDetail =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IErrorDetailMetadata =
{
    details:
    {
        propertyName:'Details',
        displayName:'Details',
        displayFormat:'text'
    }
    ,host:
    {
        propertyName:'Host',
        displayName:'Host',
        displayFormat:'text'
    }
    ,url:
    {
        propertyName:'Url',
        displayName:'Url',
        displayFormat:'text'
    }
    ,items:
    {
        propertyName:'Items',
        displayName:'Items',
        displayFormat:'text'
    }
    ,id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,creationDate:
    {
        propertyName:'CreationDate',
        displayName:'Creation Date',
        displayFormat:'date'
        ,date:
        {
            shouldValidate:true
            ,min: new Date('1/1/1900')
            ,max: new Date('3/4/2050')
            ,message: 'date is either too far in the future or past'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,type:
    {
        propertyName:'Type',
        displayName:'Type',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 200
            ,message: '200 characters or less'
        }
    }
    ,message:
    {
        propertyName:'Message',
        displayName:'Message',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 200
            ,message: '200 characters or less'
        }
    }
    ,user:
    {
        propertyName:'User',
        displayName:'User',
        displayFormat:'text'
    }
}

export interface IErrorDetail  {
details? : string;
host? : string;
url? : string;
items? : IGroupingOfNameValuePair[];
id? : number;
creationDate? : Date;
type? : string;
message? : string;
user? : string;
}

export const EmptyIErrorDetail =
{
    details:undefined,
    host:undefined,
    url:undefined,
    items:undefined,
    id:undefined,
    creationDate:undefined,
    type:undefined,
    message:undefined,
    user:undefined
}

export interface IResponseOfAppPrincipal extends IResponse {
data? : IAppPrincipal;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfAppPrincipal =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponseOfApplicationSettingDetail extends IResponse {
data? : IApplicationSettingDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfApplicationSettingDetail =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IUIMetadata  {
email? : IValidationMetaData;
length? : IValidationMetaData;
date? : IValidationMetaData;
integer? : IValidationMetaData;
decimal? : IValidationMetaData;
required? : IValidationMetaData;
propertyName? : string;
displayName? : string;
format? : string;
isReadOnly? : boolean;
isHidden? : boolean;
}

export const EmptyIUIMetadata =
{
    email:undefined,
    length:undefined,
    date:undefined,
    integer:undefined,
    decimal:undefined,
    required:undefined,
    propertyName:undefined,
    displayName:undefined,
    format:undefined,
    isReadOnly:undefined,
    isHidden:undefined
}

export const IUIMetadataMetadata =
{
    email:
    {
        propertyName:'Email',
        displayName:'Email',
        displayFormat:'text'
    }
    ,length:
    {
        propertyName:'Length',
        displayName:'Length',
        displayFormat:'text'
    }
    ,date:
    {
        propertyName:'Date',
        displayName:'Date',
        displayFormat:'text'
    }
    ,integer:
    {
        propertyName:'Integer',
        displayName:'Integer',
        displayFormat:'text'
    }
    ,decimal:
    {
        propertyName:'Decimal',
        displayName:'Decimal',
        displayFormat:'text'
    }
    ,required:
    {
        propertyName:'Required',
        displayName:'Required',
        displayFormat:'text'
    }
    ,propertyName:
    {
        propertyName:'PropertyName',
        displayName:'Property Name',
        displayFormat:'text'
    }
    ,displayName:
    {
        propertyName:'DisplayName',
        displayName:'Display Name',
        displayFormat:'text'
    }
    ,format:
    {
        propertyName:'Format',
        displayName:'Format',
        displayFormat:'text'
    }
    ,isReadOnly:
    {
        propertyName:'IsReadOnly',
        displayName:'Is Read Only',
        displayFormat:'text'
    }
    ,isHidden:
    {
        propertyName:'IsHidden',
        displayName:'Is Hidden',
        displayFormat:'text'
    }
}

export const IValidationMetaDataMetadata =
{
    shouldValidate:
    {
        propertyName:'ShouldValidate',
        displayName:'Should Validate',
        displayFormat:'text'
    }
    ,message:
    {
        propertyName:'Message',
        displayName:'Message',
        displayFormat:'text'
    }
    ,min:
    {
        propertyName:'Min',
        displayName:'Min',
        displayFormat:'text'
    }
    ,max:
    {
        propertyName:'Max',
        displayName:'Max',
        displayFormat:'text'
    }
}

export interface IValidationMetaData  {
shouldValidate? : boolean;
message? : string;
min? : any;
max? : any;
}

export const EmptyIValidationMetaData =
{
    shouldValidate:undefined,
    message:undefined,
    min:undefined,
    max:undefined
}

export interface IUserListRequest  {
searchText? : string;
defaultSortMember? : string;
id? : number;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIUserListRequest =
{
    searchText:undefined,
    defaultSortMember:undefined,
    id:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IUserListRequestMetadata =
{
    searchText:
    {
        propertyName:'SearchText',
        displayName:'Search Text',
        displayFormat:'text'
    }
    ,defaultSortMember:
    {
        propertyName:'DefaultSortMember',
        displayName:'Default Sort Member',
        displayFormat:'text'
    }
    ,id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,}
    
    export interface IUserListResponse extends IResponse {
    state? : IGridState;
    data? : IUserRow[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIUserListResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export const IUserRowMetadata =
{
    id:
    {
        propertyName:'Id',
        displayName:'Id',
        displayFormat:'text',
        isHidden: true
        ,int:
        {
            shouldValidate:true
        }
    }
    ,userName:
    {
        propertyName:'UserName',
        displayName:'User Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,clientId:
    {
        propertyName:'ClientId',
        displayName:'Client Id',
        displayFormat:'int'
        ,int:
        {
            shouldValidate:true
        }
    }
    ,firstName:
    {
        propertyName:'FirstName',
        displayName:'First Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,lastName:
    {
        propertyName:'LastName',
        displayName:'Last Name',
        displayFormat:'text'
        ,length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
    ,roles:
    {
        propertyName:'Roles',
        displayName:'Roles',
        displayFormat:'text'
    }
}

export interface IUserRow  {
id? : number;
userName? : string;
clientId? : number;
firstName? : string;
lastName? : string;
roles? : string;
}

export const EmptyIUserRow =
{
    id:undefined,
    userName:undefined,
    clientId:undefined,
    firstName:undefined,
    lastName:undefined,
    roles:undefined
}

