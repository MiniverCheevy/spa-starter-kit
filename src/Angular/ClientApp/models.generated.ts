//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
export interface IGroupingOfNameValuePair  {
name? : string;
id? : any;
data? : INameValuePair[];
}

export const EmptyIGroupingOfNameValuePair =
{
    name:undefined,
    id:undefined,
    data:undefined
}

export const IGroupingOfNameValuePairMetadata =
{
    name:
    {
    }
    ,id:
    {
    }
    ,data:
    {
    }
}

export interface INameValuePair  {
name? : string;
value? : string;
}

export const EmptyINameValuePair =
{
    name:undefined,
    value:undefined
}

export interface IApplicationSettingMessage  {
id? : number;
name? : string;
value? : string;
}

export const EmptyIApplicationSettingMessage =
{
    id:undefined,
    name:undefined,
    value:undefined
}

export const IApplicationSettingMessageMetadata =
{
    id:
    {
        int:
        {
            shouldValidate:true
        }
    }
    ,name:
    {
        length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
    }
    ,value:
    {
        length:
        {
            shouldValidate:true
            ,min: 0
            ,max: 128
            ,message: '128 characters or less'
        }
        ,required:
        {
            shouldValidate:true
        }
    }
}

export interface IApplicationSettingQueryRequest  {
defaultSortMember? : string;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIApplicationSettingQueryRequest =
{
    defaultSortMember:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IApplicationSettingQueryRequestMetadata =
{
    defaultSortMember:
    {
    }
    ,}
    
    export interface IApplicationSettingQueryResponse extends IResponse {
    state? : IGridState;
    data? : IApplicationSettingMessage[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIApplicationSettingQueryResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IGridState  {
pageNumber? : number;
pageSize? : number;
totalRecords? : number;
totalPages? : number;
sortMember? : string;
sortDirection? : string;
defaultSortMember? : string;
resetPaging? : boolean;
}

export const EmptyIGridState =
{
    pageNumber:undefined,
    pageSize:undefined,
    totalRecords:undefined,
    totalPages:undefined,
    sortMember:undefined,
    sortDirection:undefined,
    defaultSortMember:undefined,
    resetPaging:undefined
}

export interface IAppPrincipal  {
expiration? : Date;
refreshTime? : Date;
isAuthenticated? : boolean;
userName? : string;
userId? : number;
firstName? : string;
lastName? : string;
roles? : string[];
isAdmin? : boolean;
token? : string;
}

export const EmptyIAppPrincipal =
{
    expiration:undefined,
    refreshTime:undefined,
    isAuthenticated:undefined,
    userName:undefined,
    userId:undefined,
    firstName:undefined,
    lastName:undefined,
    roles:undefined,
    isAdmin:undefined,
    token:undefined
}

export const IAppPrincipalMetadata =
{
    expiration:
    {
        date:
        {
            shouldValidate:true
        }
    }
    ,refreshTime:
    {
        date:
        {
            shouldValidate:true
        }
    }
    ,isAuthenticated:
    {
    }
    ,userName:
    {
    }
    ,userId:
    {
    }
    ,firstName:
    {
    }
    ,lastName:
    {
    }
    ,roles:
    {
    }
    ,isAdmin:
    {
    }
    ,token:
    {
    }
}

export interface IClientInfo  {
timeZoneOffsetInMinutes? : number;
}

export const EmptyIClientInfo =
{
    timeZoneOffsetInMinutes:undefined
}

export const IClientInfoMetadata =
{
    timeZoneOffsetInMinutes:
    {
        int:
        {
            shouldValidate:true
        }
    }
}

export interface IEmptyRequest  {
}

export const EmptyIEmptyRequest =
{
}

export const IEmptyRequestMetadata =
{
}

export interface IErrorQueryRequest  {
searchText? : string;
defaultSortMember? : string;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIErrorQueryRequest =
{
    searchText:undefined,
    defaultSortMember:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IErrorQueryRequestMetadata =
{
    searchText:
    {
    }
    ,defaultSortMember:
    {
    }
    ,}
    
    export interface IErrorQueryResponse extends IResponse {
    state? : IGridState;
    data? : IErrorMessage[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIErrorQueryResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IErrorMessage  {
id? : number;
creationDate? : Date;
type? : string;
message? : string;
user? : string;
}

export const EmptyIErrorMessage =
{
    id:undefined,
    creationDate:undefined,
    type:undefined,
    message:undefined,
    user:undefined
}

export interface IIdRequest  {
id? : number;
}

export const EmptyIIdRequest =
{
    id:undefined
}

export const IIdRequestMetadata =
{
    id:
    {
        int:
        {
            shouldValidate:true
        }
    }
}

export enum Lists  {
Role = 1,
Lists = 2,
SqlOperation = 3
}
export const ListsMetadata =
{
}

export interface IListsRequest  {
includeInactive? : boolean;
lists? : Lists[];
}

export const EmptyIListsRequest =
{
    includeInactive:undefined,
    lists:undefined
}

export const IListsRequestMetadata =
{
    includeInactive:
    {
    }
    ,lists:
    {
    }
}

export interface IListsResponse extends IResponse {
roles? : IListItem[];
lists? : IListItem[];
sqlOperations? : IListItem[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIListsResponse =
{
    roles:undefined,
    lists:undefined,
    sqlOperations:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IListItem  {
value? : number;
name? : string;
}

export const EmptyIListItem =
{
    value:undefined,
    name:undefined
}

export interface IMobileErrorRequest  {
errorMsg? : string;
url? : string;
lineNumber? : string;
column? : string;
errorObject? : string;
}

export const EmptyIMobileErrorRequest =
{
    errorMsg:undefined,
    url:undefined,
    lineNumber:undefined,
    column:undefined,
    errorObject:undefined
}

export const IMobileErrorRequestMetadata =
{
    errorMsg:
    {
    }
    ,url:
    {
    }
    ,lineNumber:
    {
    }
    ,column:
    {
    }
    ,errorObject:
    {
    }
}

export interface INewItemResponse extends IResponse {
newItemId? : number;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyINewItemResponse =
{
    newItemId:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponse  {
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponse =
{
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponseOfApplicationSettingMessage extends IResponse {
data? : IApplicationSettingMessage;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfApplicationSettingMessage =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IResponseOfUserDetail extends IResponse {
data? : IUserDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfUserDetail =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IUserDetail  {
id? : number;
userName? : string;
clientId? : number;
firstName? : string;
lastName? : string;
lockoutEnabled? : boolean;
password? : string;
confirmPassword? : string;
roles? : IListItem[];
}

export const EmptyIUserDetail =
{
    id:undefined,
    userName:undefined,
    clientId:undefined,
    firstName:undefined,
    lastName:undefined,
    lockoutEnabled:undefined,
    password:undefined,
    confirmPassword:undefined,
    roles:undefined
}

export interface IResponseOfErrorDetail extends IResponse {
data? : IErrorDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfErrorDetail =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IErrorDetail  {
details? : string;
host? : string;
url? : string;
items? : IGroupingOfNameValuePair[];
id? : number;
creationDate? : Date;
type? : string;
message? : string;
user? : string;
}

export const EmptyIErrorDetail =
{
    details:undefined,
    host:undefined,
    url:undefined,
    items:undefined,
    id:undefined,
    creationDate:undefined,
    type:undefined,
    message:undefined,
    user:undefined
}

export interface IResponseOfAppPrincipal extends IResponse {
data? : IAppPrincipal;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export const EmptyIResponseOfAppPrincipal =
{
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IUIMetadata  {
email? : IValidationMetaData;
length? : IValidationMetaData;
date? : IValidationMetaData;
integer? : IValidationMetaData;
decimal? : IValidationMetaData;
isRequired? : boolean;
propertyName? : string;
displayName? : string;
format? : string;
isReadOnly? : boolean;
isHidden? : boolean;
}

export const EmptyIUIMetadata =
{
    email:undefined,
    length:undefined,
    date:undefined,
    integer:undefined,
    decimal:undefined,
    isRequired:undefined,
    propertyName:undefined,
    displayName:undefined,
    format:undefined,
    isReadOnly:undefined,
    isHidden:undefined
}

export const IUIMetadataMetadata =
{
    email:
    {
    }
    ,length:
    {
    }
    ,date:
    {
    }
    ,integer:
    {
    }
    ,decimal:
    {
    }
    ,isRequired:
    {
    }
    ,propertyName:
    {
    }
    ,displayName:
    {
    }
    ,format:
    {
    }
    ,isReadOnly:
    {
    }
    ,isHidden:
    {
    }
}

export interface IValidationMetaData  {
shouldValidate? : boolean;
message? : string;
min? : any;
max? : any;
}

export const EmptyIValidationMetaData =
{
    shouldValidate:undefined,
    message:undefined,
    min:undefined,
    max:undefined
}

export interface IUserQueryRequest  {
searchText? : string;
defaultSortMember? : string;
id? : number;
sortDirection? : string;
resetPaging? : boolean;
pageNumber? : number;
pageSize? : number;
sortMember? : string;
totalRecords? : number;
totalPages? : number;
}

export const EmptyIUserQueryRequest =
{
    searchText:undefined,
    defaultSortMember:undefined,
    id:undefined,
    sortDirection:undefined,
    resetPaging:undefined,
    pageNumber:undefined,
    pageSize:undefined,
    sortMember:undefined,
    totalRecords:undefined,
    totalPages:undefined
}

export const IUserQueryRequestMetadata =
{
    searchText:
    {
    }
    ,defaultSortMember:
    {
    }
    ,id:
    {
        int:
        {
            shouldValidate:true
        }
    }
    ,}
    
    export interface IUserQueryResponse extends IResponse {
    state? : IGridState;
    data? : IUserMessage[];
    numberOfRowsEffected? : number;
    isOk? : boolean;
    hasLogicException? : boolean;
    message? : string;
    details? : INameValuePair[];
    exception? : any;
}

export const EmptyIUserQueryResponse =
{
    state:undefined,
    data:undefined,
    numberOfRowsEffected:undefined,
    isOk:undefined,
    hasLogicException:undefined,
    message:undefined,
    details:undefined,
    exception:undefined
}

export interface IUserMessage  {
id? : number;
userName? : string;
clientId? : number;
firstName? : string;
lastName? : string;
roles? : string;
}

export const EmptyIUserMessage =
{
    id:undefined,
    userName:undefined,
    clientId:undefined,
    firstName:undefined,
    lastName:undefined,
    roles:undefined
}

