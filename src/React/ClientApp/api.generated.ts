//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
import { CurrentUserService } from 'ClientApp/services/current-user-service';
import { MessengerService } from 'ClientApp/services/messenger-service';
import { AjaxService } from 'ClientApp/services/ajax-service';
import * as Models from './models.generated';
export class ApplicationSetting {
    url: string = 'api/ApplicationSetting';
    public async get(request: Models.IIdRequest):
        Promise<Models.IResponseOfApplicationSettingMessage> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
    public async delete(request: Models.IIdRequest):
        Promise<Models.IResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildDeleteRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class ApplicationSettingDetail {
    url: string = 'api/ApplicationSettingDetail';
    public async put(request: Models.IApplicationSettingMessage):
        Promise<Models.INewItemResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildPutRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class ApplicationSettingList {
    url: string = 'api/ApplicationSettingList';
    public async get(request: Models.IApplicationSettingQueryRequest):
        Promise<Models.IApplicationSettingQueryResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class CurrentUser {
    url: string = 'api/CurrentUser';
    public async get(request: Models.IEmptyRequest):
        Promise<Models.IResponseOfAppPrincipal> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class ErrorDetail {
    url: string = 'api/ErrorDetail';
    public async get(request: Models.IIdRequest):
        Promise<Models.IResponseOfErrorDetail> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class ErrorList {
    url: string = 'api/ErrorList';
    public async get(request: Models.IErrorQueryRequest):
        Promise<Models.IErrorQueryResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class Lists {
    url: string = 'api/Lists';
    public async get(request: Models.IListsRequest):
        Promise<Models.IListsResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class MobileError {
    url: string = 'api/MobileError';
    public async post(request: Models.IMobileErrorRequest):
        Promise<Models.IResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildPostRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class UserDetail {
    url: string = 'api/UserDetail';
    public async delete(request: Models.IIdRequest):
        Promise<Models.IResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildDeleteRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
    public async get(request: Models.IIdRequest):
        Promise<Models.IResponseOfUserDetail> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
    public async put(request: Models.IUserDetail):
        Promise<Models.INewItemResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildPutRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

export class UserList {
    url: string = 'api/UserList';
    public async get(request: Models.IUserQueryRequest):
        Promise<Models.IUserQueryResponse> {
        try {
            MessengerService.incrementHttpRequestCounter();
            var httpResponse = await AjaxService.buildGetRequest(request, this.url);
            var response = await httpResponse.json();

            var out = <Models.IResponse>response;
            MessengerService.showResponseMessage(out);
            MessengerService.decrementHttpRequestCounter();
            return out;
        }
        catch (err) {
            AjaxService.logError(err, this.url, (<any>new Error()).stack);

            var result = {
                isOk: false,
                message: err.statusText
            };

            MessengerService.decrementHttpRequestCounter();
            MessengerService.showResponseMessage(result);
            return result;
        }
    }
}

