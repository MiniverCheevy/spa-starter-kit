//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************

export class GroupingOfNameValuePair  {

static empty()
{
    const result =
    {
        name:null,
        id:null,
        data:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
        }
        ,id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text'
        }
        ,data:
        {
            propertyName:'Data',
            jsName:'data',
            displayName:'Data',
            displayFormat:'text'
        }
    };
    return result;
}

name? : string;
id? : any;
data? : NameValuePair[];
}

export class NameValuePair  {

static empty()
{
    const result =
    {
        name:null,
        value:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
        }
        ,value:
        {
            propertyName:'Value',
            jsName:'value',
            displayName:'Value',
            displayFormat:'text'
        }
    };
    return result;
}

name? : string;
value? : string;
}

export class IResponse  {

static empty()
{
    const result =
    {
        isOk:null,
        message:null,
        exception:null,
        details:null,
        hasLogicException:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        isOk:
        {
            propertyName:'IsOk',
            jsName:'isOk',
            displayName:'Is Ok',
            displayFormat:'text'
        }
        ,message:
        {
            propertyName:'Message',
            jsName:'message',
            displayName:'Message',
            displayFormat:'text'
        }
        ,exception:
        {
            propertyName:'Exception',
            jsName:'exception',
            displayName:'Exception',
            displayFormat:'text'
        }
        ,details:
        {
            propertyName:'Details',
            jsName:'details',
            displayName:'Details',
            displayFormat:'text'
        }
        ,hasLogicException:
        {
            propertyName:'HasLogicException',
            jsName:'hasLogicException',
            displayName:'Has Logic Exception',
            displayFormat:'text'
        }
    };
    return result;
}

isOk? : boolean;
message? : string;
exception? : any;
details? : INameValuePair[];
hasLogicException? : boolean;
}

export class INameValuePair  {

static empty()
{
    const result =
    {
        name:null,
        value:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
        }
        ,value:
        {
            propertyName:'Value',
            jsName:'value',
            displayName:'Value',
            displayFormat:'text'
        }
    };
    return result;
}

name? : string;
value? : string;
}

export class Response extends IResponse {

static empty()
{
    const result =
    {
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class DateTimeOffset
{
    constructor(value?: string | Date)
    {
        if (value != null)
        {
            this.internalValue = new Date(value).toISOString();
        }
        
    }
    private internalValue: string;
    get() {
    return this.internalValue;
}
set(value)
{
    this.internalValue = new Date(value).toISOString();
}
get date():Date {
return new Date(this.internalValue);
}
set date(value:Date) {
this.internalValue = value.toISOString();
}
//perhaps add
//get DateDisplay
//get TimeDisplay
//get DateTimeDisplay
}
export class ApplicationSettingDetail  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        value:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
        ,value:
        {
            propertyName:'Value',
            jsName:'value',
            displayName:'Value',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
name? : string;
value? : string;
}

export class ApplicationSettingListRequest  {

static empty()
{
    const result =
    {
        defaultSortMember:null,
        sortDirection:null,
        resetPaging:null,
        pageNumber:null,
        pageSize:null,
        sortMember:null,
        totalRecords:null,
        totalPages:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,};
        return result;
    }
    
    defaultSortMember? : string;
    sortDirection? : string;
    resetPaging? : boolean;
    pageNumber? : number;
    pageSize? : number;
    sortMember? : string;
    totalRecords? : number;
    totalPages? : number;
}

export class ApplicationSettingListResponse extends IResponse {

static empty()
{
    const result =
    {
        state:null,
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

state? : IGridState;
data? : ApplicationSettingRow[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class IGridState  {

static empty()
{
    const result =
    {
        pageNumber:null,
        pageSize:null,
        totalRecords:null,
        totalPages:null,
        sortMember:null,
        sortDirection:null,
        defaultSortMember:null,
        resetPaging:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        pageNumber:
        {
            propertyName:'PageNumber',
            jsName:'pageNumber',
            displayName:'Page Number',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,pageSize:
        {
            propertyName:'PageSize',
            jsName:'pageSize',
            displayName:'Page Size',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,totalRecords:
        {
            propertyName:'TotalRecords',
            jsName:'totalRecords',
            displayName:'Total Records',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,totalPages:
        {
            propertyName:'TotalPages',
            jsName:'totalPages',
            displayName:'Total Pages',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,sortMember:
        {
            propertyName:'SortMember',
            jsName:'sortMember',
            displayName:'Sort Member',
            displayFormat:'text'
        }
        ,sortDirection:
        {
            propertyName:'SortDirection',
            jsName:'sortDirection',
            displayName:'Sort Direction',
            displayFormat:'text'
        }
        ,defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,resetPaging:
        {
            propertyName:'ResetPaging',
            jsName:'resetPaging',
            displayName:'Reset Paging',
            displayFormat:'text'
        }
    };
    return result;
}

pageNumber? : number;
pageSize? : number;
totalRecords? : number;
totalPages? : number;
sortMember? : string;
sortDirection? : string;
defaultSortMember? : string;
resetPaging? : boolean;
}

export class ApplicationSettingRow  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        value:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
        ,value:
        {
            propertyName:'Value',
            jsName:'value',
            displayName:'Value',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
name? : string;
value? : string;
}

export class AppPrincipal  {

static empty()
{
    const result =
    {
        expiration:null,
        refreshTime:null,
        isAuthenticated:null,
        userName:null,
        userId:null,
        firstName:null,
        lastName:null,
        roles:null,
        isAdmin:null,
        token:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        expiration:
        {
            propertyName:'Expiration',
            jsName:'expiration',
            displayName:'Expiration',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
            }
        }
        ,refreshTime:
        {
            propertyName:'RefreshTime',
            jsName:'refreshTime',
            displayName:'Refresh Time',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
            }
        }
        ,isAuthenticated:
        {
            propertyName:'IsAuthenticated',
            jsName:'isAuthenticated',
            displayName:'Is Authenticated',
            displayFormat:'text'
        }
        ,userName:
        {
            propertyName:'UserName',
            jsName:'userName',
            displayName:'User Name',
            displayFormat:'text'
        }
        ,userId:
        {
            propertyName:'UserId',
            jsName:'userId',
            displayName:'User Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,firstName:
        {
            propertyName:'FirstName',
            jsName:'firstName',
            displayName:'First Name',
            displayFormat:'text'
        }
        ,lastName:
        {
            propertyName:'LastName',
            jsName:'lastName',
            displayName:'Last Name',
            displayFormat:'text'
        }
        ,roles:
        {
            propertyName:'Roles',
            jsName:'roles',
            displayName:'Roles',
            displayFormat:'text'
        }
        ,isAdmin:
        {
            propertyName:'IsAdmin',
            jsName:'isAdmin',
            displayName:'Is Admin',
            displayFormat:'text'
        }
        ,token:
        {
            propertyName:'Token',
            jsName:'token',
            displayName:'Token',
            displayFormat:'text'
        }
    };
    return result;
}

expiration? : DateTimeOffset;
refreshTime? : DateTimeOffset;
isAuthenticated? : boolean;
userName? : string;
userId? : number;
firstName? : string;
lastName? : string;
roles? : string[];
isAdmin? : boolean;
token? : string;
}

export class ClientInfo  {

static empty()
{
    const result =
    {
        timeZoneOffsetInMinutes:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        timeZoneOffsetInMinutes:
        {
            propertyName:'TimeZoneOffsetInMinutes',
            jsName:'timeZoneOffsetInMinutes',
            displayName:'Time Zone Offset In Minutes',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

timeZoneOffsetInMinutes? : number;
}

export class EmptyRequest  {

static empty()
{
    const result =
    {
    };
    return result;
}

static metadata()
{
    var result =
    {
    };
    return result;
}

}

export class ErrorListRequest  {

static empty()
{
    const result =
    {
        searchText:null,
        defaultSortMember:null,
        sortDirection:null,
        resetPaging:null,
        pageNumber:null,
        pageSize:null,
        sortMember:null,
        totalRecords:null,
        totalPages:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        searchText:
        {
            propertyName:'SearchText',
            jsName:'searchText',
            displayName:'Search Text',
            displayFormat:'text'
        }
        ,defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,};
        return result;
    }
    
    searchText? : string;
    defaultSortMember? : string;
    sortDirection? : string;
    resetPaging? : boolean;
    pageNumber? : number;
    pageSize? : number;
    sortMember? : string;
    totalRecords? : number;
    totalPages? : number;
}

export class ErrorListResponse extends IResponse {

static empty()
{
    const result =
    {
        state:null,
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

state? : IGridState;
data? : ErrorRow[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ErrorRow  {

static empty()
{
    const result =
    {
        id:null,
        creationDate:null,
        type:null,
        message:null,
        user:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,creationDate:
        {
            propertyName:'CreationDate',
            jsName:'creationDate',
            displayName:'Creation Date',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
                ,min: new Date('1/1/1900')
                ,max: new Date('3/4/2050')
                ,message: 'date is either too far in the future or past'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,type:
        {
            propertyName:'Type',
            jsName:'type',
            displayName:'Type',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 200
                ,message: '200 characters or less'
            }
        }
        ,message:
        {
            propertyName:'Message',
            jsName:'message',
            displayName:'Message',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 200
                ,message: '200 characters or less'
            }
        }
        ,user:
        {
            propertyName:'User',
            jsName:'user',
            displayName:'User',
            displayFormat:'text'
        }
    };
    return result;
}

id? : number;
creationDate? : DateTimeOffset;
type? : string;
message? : string;
user? : string;
}

export class IdRequest  {

static empty()
{
    const result =
    {
        id:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
}

export class ListItem  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        filterData:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
        }
        ,filterData:
        {
            propertyName:'FilterData',
            jsName:'filterData',
            displayName:'Filter Data',
            displayFormat:'text'
        }
    };
    return result;
}

id? : number;
name? : string;
filterData? : string;
}

export enum Lists  {
Roles = 1,
Lists = 2,
SqlOperation = 3,
ApplicationSetting = 4,
Project = 5,
Member = 6,
Team = 7
}
export class ListsRequest  {

static empty()
{
    const result =
    {
        includeInactive:null,
        lists:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        includeInactive:
        {
            propertyName:'IncludeInactive',
            jsName:'includeInactive',
            displayName:'Include Inactive',
            displayFormat:'text'
        }
        ,lists:
        {
            propertyName:'Lists',
            jsName:'lists',
            displayName:'Lists',
            displayFormat:'text'
        }
    };
    return result;
}

includeInactive? : boolean;
lists? : Lists[];
}

export class ListsResponse extends IResponse {

static empty()
{
    const result =
    {
        roles:null,
        lists:null,
        sqlOperations:null,
        applicationSettings:null,
        projects:null,
        members:null,
        teams:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

roles? : IListItem[];
lists? : IListItem[];
sqlOperations? : IListItem[];
applicationSettings? : IListItem[];
projects? : IListItem[];
members? : IListItem[];
teams? : IListItem[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class IListItem  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        filterData:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
        }
        ,filterData:
        {
            propertyName:'FilterData',
            jsName:'filterData',
            displayName:'Filter Data',
            displayFormat:'text'
        }
    };
    return result;
}

id? : number;
name? : string;
filterData? : string;
}

export class MemberDetail  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        title:null,
        requiredInt:null,
        optionalInt:null,
        requiredDate:null,
        optionalDate:null,
        requiredDateTimeOffset:null,
        optionalDateTimeOffset:null,
        requiredDecimal:null,
        optionalDecimal:null,
        managerId:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
        ,title:
        {
            propertyName:'Title',
            jsName:'title',
            displayName:'Title',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,requiredInt:
        {
            propertyName:'RequiredInt',
            jsName:'requiredInt',
            displayName:'Required Int',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,optionalInt:
        {
            propertyName:'OptionalInt',
            jsName:'optionalInt',
            displayName:'Optional Int',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,requiredDate:
        {
            propertyName:'RequiredDate',
            jsName:'requiredDate',
            displayName:'Required Date',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
                ,min: new Date('1/1/1900')
                ,max: new Date('3/4/2050')
                ,message: 'date is either too far in the future or past'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,optionalDate:
        {
            propertyName:'OptionalDate',
            jsName:'optionalDate',
            displayName:'Optional Date',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
                ,min: new Date('1/1/1900')
                ,max: new Date('3/4/2050')
                ,message: 'date is either too far in the future or past'
            }
        }
        ,requiredDateTimeOffset:
        {
            propertyName:'RequiredDateTimeOffset',
            jsName:'requiredDateTimeOffset',
            displayName:'Required Date',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
                ,min: new Date('1/1/1900')
                ,max: new Date('3/4/2050')
                ,message: 'date is either too far in the future or past'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,optionalDateTimeOffset:
        {
            propertyName:'OptionalDateTimeOffset',
            jsName:'optionalDateTimeOffset',
            displayName:'Optional Date',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
                ,min: new Date('1/1/1900')
                ,max: new Date('3/4/2050')
                ,message: 'date is either too far in the future or past'
            }
        }
        ,requiredDecimal:
        {
            propertyName:'RequiredDecimal',
            jsName:'requiredDecimal',
            displayName:'Required Decimal',
            displayFormat:'decimal'
            ,decimal:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,optionalDecimal:
        {
            propertyName:'OptionalDecimal',
            jsName:'optionalDecimal',
            displayName:'Optional Decimal',
            displayFormat:'decimal'
            ,decimal:
            {
                shouldValidate:true
            }
        }
        ,managerId:
        {
            propertyName:'ManagerId',
            jsName:'managerId',
            displayName:'Manager',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
name? : string;
title? : string;
requiredInt? : number;
optionalInt? : number;
requiredDate? : DateTimeOffset;
optionalDate? : DateTimeOffset;
requiredDateTimeOffset? : DateTimeOffset;
optionalDateTimeOffset? : DateTimeOffset;
requiredDecimal? : number;
optionalDecimal? : number;
managerId? : number;
}

export class MemberListRequest  {

static empty()
{
    const result =
    {
        defaultSortMember:null,
        sortDirection:null,
        resetPaging:null,
        pageNumber:null,
        pageSize:null,
        sortMember:null,
        totalRecords:null,
        totalPages:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,};
        return result;
    }
    
    defaultSortMember? : string;
    sortDirection? : string;
    resetPaging? : boolean;
    pageNumber? : number;
    pageSize? : number;
    sortMember? : string;
    totalRecords? : number;
    totalPages? : number;
}

export class MemberListResponse extends IResponse {

static empty()
{
    const result =
    {
        state:null,
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

state? : IGridState;
data? : MemberRow[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class MemberRow  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        title:null,
        requiredInt:null,
        optionalInt:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
        ,title:
        {
            propertyName:'Title',
            jsName:'title',
            displayName:'Title',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,requiredInt:
        {
            propertyName:'RequiredInt',
            jsName:'requiredInt',
            displayName:'Required Int',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,optionalInt:
        {
            propertyName:'OptionalInt',
            jsName:'optionalInt',
            displayName:'Optional Int',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
name? : string;
title? : string;
requiredInt? : number;
optionalInt? : number;
}

export class MobileErrorRequest  {

static empty()
{
    const result =
    {
        errorMsg:null,
        url:null,
        lineNumber:null,
        column:null,
        errorObject:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        errorMsg:
        {
            propertyName:'ErrorMsg',
            jsName:'errorMsg',
            displayName:'Error Msg',
            displayFormat:'text'
        }
        ,url:
        {
            propertyName:'Url',
            jsName:'url',
            displayName:'Url',
            displayFormat:'text'
        }
        ,lineNumber:
        {
            propertyName:'LineNumber',
            jsName:'lineNumber',
            displayName:'Line Number',
            displayFormat:'text'
        }
        ,column:
        {
            propertyName:'Column',
            jsName:'column',
            displayName:'Column',
            displayFormat:'text'
        }
        ,errorObject:
        {
            propertyName:'ErrorObject',
            jsName:'errorObject',
            displayName:'Error Object',
            displayFormat:'text'
        }
    };
    return result;
}

errorMsg? : string;
url? : string;
lineNumber? : string;
column? : string;
errorObject? : string;
}

export class NewItemResponse extends IResponse {

static empty()
{
    const result =
    {
        newItemId:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

newItemId? : number;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ProjectDetail  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        teamId:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
        ,teamId:
        {
            propertyName:'TeamId',
            jsName:'teamId',
            displayName:'Team',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
name? : string;
teamId? : number;
}

export class ProjectListRequest  {

static empty()
{
    const result =
    {
        defaultSortMember:null,
        sortDirection:null,
        resetPaging:null,
        pageNumber:null,
        pageSize:null,
        sortMember:null,
        totalRecords:null,
        totalPages:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,};
        return result;
    }
    
    defaultSortMember? : string;
    sortDirection? : string;
    resetPaging? : boolean;
    pageNumber? : number;
    pageSize? : number;
    sortMember? : string;
    totalRecords? : number;
    totalPages? : number;
}

export class ProjectListResponse extends IResponse {

static empty()
{
    const result =
    {
        state:null,
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

state? : IGridState;
data? : ProjectRow[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ProjectRow  {

static empty()
{
    const result =
    {
        id:null,
        name:null,
        teamId:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
        ,teamId:
        {
            propertyName:'TeamId',
            jsName:'teamId',
            displayName:'Team',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
    };
    return result;
}

id? : number;
name? : string;
teamId? : number;
}

export class ResponseOfUserDetail extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : UserDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class UserDetail  {

static empty()
{
    const result =
    {
        id:null,
        userName:null,
        clientId:null,
        firstName:null,
        lastName:null,
        lockoutEnabled:null,
        password:null,
        confirmPassword:null,
        roles:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,userName:
        {
            propertyName:'UserName',
            jsName:'userName',
            displayName:'User Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,clientId:
        {
            propertyName:'ClientId',
            jsName:'clientId',
            displayName:'Client Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,firstName:
        {
            propertyName:'FirstName',
            jsName:'firstName',
            displayName:'First Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,lastName:
        {
            propertyName:'LastName',
            jsName:'lastName',
            displayName:'Last Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,lockoutEnabled:
        {
            propertyName:'LockoutEnabled',
            jsName:'lockoutEnabled',
            displayName:'Lockout Enabled',
            displayFormat:'text'
            ,required:
            {
                shouldValidate:true
            }
        }
        ,password:
        {
            propertyName:'Password',
            jsName:'password',
            displayName:'Password',
            displayFormat:'text'
        }
        ,confirmPassword:
        {
            propertyName:'ConfirmPassword',
            jsName:'confirmPassword',
            displayName:'Confirm Password',
            displayFormat:'text'
        }
        ,roles:
        {
            propertyName:'Roles',
            jsName:'roles',
            displayName:'Roles',
            displayFormat:'text'
        }
    };
    return result;
}

id? : number;
userName? : string;
clientId? : number;
firstName? : string;
lastName? : string;
lockoutEnabled? : boolean;
password? : string;
confirmPassword? : string;
roles? : ListItem[];
}

export class ResponseOfTeamDetail extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : TeamDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class TeamDetail  {

static empty()
{
    const result =
    {
        id:null,
        name:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
    };
    return result;
}

id? : number;
name? : string;
}

export class ResponseOfProjectDetail extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : ProjectDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ResponseOfMemberDetail extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : MemberDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ResponseOfErrorDetail extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : ErrorDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ErrorDetail  {

static empty()
{
    const result =
    {
        details:null,
        host:null,
        url:null,
        items:null,
        id:null,
        creationDate:null,
        type:null,
        message:null,
        user:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        details:
        {
            propertyName:'Details',
            jsName:'details',
            displayName:'Details',
            displayFormat:'text'
        }
        ,host:
        {
            propertyName:'Host',
            jsName:'host',
            displayName:'Host',
            displayFormat:'text'
        }
        ,url:
        {
            propertyName:'Url',
            jsName:'url',
            displayName:'Url',
            displayFormat:'text'
        }
        ,items:
        {
            propertyName:'Items',
            jsName:'items',
            displayName:'Items',
            displayFormat:'text'
        }
        ,id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,creationDate:
        {
            propertyName:'CreationDate',
            jsName:'creationDate',
            displayName:'Creation Date',
            displayFormat:'date'
            ,date:
            {
                shouldValidate:true
                ,min: new Date('1/1/1900')
                ,max: new Date('3/4/2050')
                ,message: 'date is either too far in the future or past'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,type:
        {
            propertyName:'Type',
            jsName:'type',
            displayName:'Type',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 200
                ,message: '200 characters or less'
            }
        }
        ,message:
        {
            propertyName:'Message',
            jsName:'message',
            displayName:'Message',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 200
                ,message: '200 characters or less'
            }
        }
        ,user:
        {
            propertyName:'User',
            jsName:'user',
            displayName:'User',
            displayFormat:'text'
        }
    };
    return result;
}

details? : string;
host? : string;
url? : string;
items? : GroupingOfNameValuePair[];
id? : number;
creationDate? : DateTimeOffset;
type? : string;
message? : string;
user? : string;
}

export class ResponseOfAppPrincipal extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : AppPrincipal;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class ResponseOfApplicationSettingDetail extends IResponse {

static empty()
{
    const result =
    {
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

data? : ApplicationSettingDetail;
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class TeamListRequest  {

static empty()
{
    const result =
    {
        defaultSortMember:null,
        sortDirection:null,
        resetPaging:null,
        pageNumber:null,
        pageSize:null,
        sortMember:null,
        totalRecords:null,
        totalPages:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,};
        return result;
    }
    
    defaultSortMember? : string;
    sortDirection? : string;
    resetPaging? : boolean;
    pageNumber? : number;
    pageSize? : number;
    sortMember? : string;
    totalRecords? : number;
    totalPages? : number;
}

export class TeamListResponse extends IResponse {

static empty()
{
    const result =
    {
        state:null,
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

state? : IGridState;
data? : TeamRow[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class TeamRow  {

static empty()
{
    const result =
    {
        id:null,
        name:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,name:
        {
            propertyName:'Name',
            jsName:'name',
            displayName:'Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
        }
    };
    return result;
}

id? : number;
name? : string;
}

export class UIMetadata  {

static empty()
{
    const result =
    {
        propertyName:null,
        jsName:null,
        displayName:null,
        displayFormat:null,
        email:null,
        length:null,
        date:null,
        int:null,
        decimal:null,
        required:null,
        isReadOnly:null,
        isHidden:null,
        doNotSort:null,
        control:null,
        isValid:null,
        validationMessage:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        propertyName:
        {
            propertyName:'PropertyName',
            jsName:'propertyName',
            displayName:'Property Name',
            displayFormat:'text'
        }
        ,jsName:
        {
            propertyName:'JsName',
            jsName:'jsName',
            displayName:'Js Name',
            displayFormat:'text'
        }
        ,displayName:
        {
            propertyName:'DisplayName',
            jsName:'displayName',
            displayName:'Display Name',
            displayFormat:'text'
        }
        ,displayFormat:
        {
            propertyName:'DisplayFormat',
            jsName:'displayFormat',
            displayName:'Display Format',
            displayFormat:'text'
        }
        ,email:
        {
            propertyName:'Email',
            jsName:'email',
            displayName:'Email',
            displayFormat:'text'
        }
        ,length:
        {
            propertyName:'Length',
            jsName:'length',
            displayName:'Length',
            displayFormat:'text'
        }
        ,date:
        {
            propertyName:'Date',
            jsName:'date',
            displayName:'Date',
            displayFormat:'text'
        }
        ,int:
        {
            propertyName:'Int',
            jsName:'int',
            displayName:'Int',
            displayFormat:'text'
        }
        ,decimal:
        {
            propertyName:'Decimal',
            jsName:'decimal',
            displayName:'Decimal',
            displayFormat:'text'
        }
        ,required:
        {
            propertyName:'Required',
            jsName:'required',
            displayName:'Required',
            displayFormat:'text'
        }
        ,isReadOnly:
        {
            propertyName:'IsReadOnly',
            jsName:'isReadOnly',
            displayName:'Is Read Only',
            displayFormat:'text'
        }
        ,isHidden:
        {
            propertyName:'IsHidden',
            jsName:'isHidden',
            displayName:'Is Hidden',
            displayFormat:'text'
        }
        ,doNotSort:
        {
            propertyName:'DoNotSort',
            jsName:'doNotSort',
            displayName:'Do Not Sort',
            displayFormat:'text'
        }
        ,control:
        {
            propertyName:'Control',
            jsName:'control',
            displayName:'Control',
            displayFormat:'text'
        }
        ,isValid:
        {
            propertyName:'IsValid',
            jsName:'isValid',
            displayName:'Is Valid',
            displayFormat:'text'
        }
        ,validationMessage:
        {
            propertyName:'ValidationMessage',
            jsName:'validationMessage',
            displayName:'Validation Message',
            displayFormat:'text'
        }
    };
    return result;
}

propertyName? : string;
jsName? : string;
displayName? : string;
displayFormat? : string;
email? : ValidationMetaData;
length? : ValidationMetaData;
date? : ValidationMetaData;
int? : ValidationMetaData;
decimal? : ValidationMetaData;
required? : ValidationMetaData;
isReadOnly? : boolean;
isHidden? : boolean;
doNotSort? : boolean;
control? : any;
isValid? : boolean;
validationMessage? : string;
}

export class ValidationMetaData  {

static empty()
{
    const result =
    {
        shouldValidate:null,
        message:null,
        min:null,
        max:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        shouldValidate:
        {
            propertyName:'ShouldValidate',
            jsName:'shouldValidate',
            displayName:'Should Validate',
            displayFormat:'text'
        }
        ,message:
        {
            propertyName:'Message',
            jsName:'message',
            displayName:'Message',
            displayFormat:'text'
        }
        ,min:
        {
            propertyName:'Min',
            jsName:'min',
            displayName:'Min',
            displayFormat:'text'
        }
        ,max:
        {
            propertyName:'Max',
            jsName:'max',
            displayName:'Max',
            displayFormat:'text'
        }
    };
    return result;
}

shouldValidate? : boolean;
message? : string;
min? : any;
max? : any;
}

export class UserListRequest  {

static empty()
{
    const result =
    {
        searchText:null,
        defaultSortMember:null,
        id:null,
        sortDirection:null,
        resetPaging:null,
        pageNumber:null,
        pageSize:null,
        sortMember:null,
        totalRecords:null,
        totalPages:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        searchText:
        {
            propertyName:'SearchText',
            jsName:'searchText',
            displayName:'Search Text',
            displayFormat:'text'
        }
        ,defaultSortMember:
        {
            propertyName:'DefaultSortMember',
            jsName:'defaultSortMember',
            displayName:'Default Sort Member',
            displayFormat:'text'
        }
        ,id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,};
        return result;
    }
    
    searchText? : string;
    defaultSortMember? : string;
    id? : number;
    sortDirection? : string;
    resetPaging? : boolean;
    pageNumber? : number;
    pageSize? : number;
    sortMember? : string;
    totalRecords? : number;
    totalPages? : number;
}

export class UserListResponse extends IResponse {

static empty()
{
    const result =
    {
        state:null,
        data:null,
        numberOfRowsEffected:null,
        isOk:null,
        hasLogicException:null,
        message:null,
        details:null,
        exception:null
    };
    return result;
}

state? : IGridState;
data? : UserRow[];
numberOfRowsEffected? : number;
isOk? : boolean;
hasLogicException? : boolean;
message? : string;
details? : INameValuePair[];
exception? : any;
}

export class UserRow  {

static empty()
{
    const result =
    {
        id:null,
        userName:null,
        clientId:null,
        firstName:null,
        lastName:null,
        roles:null
    };
    return result;
}

static metadata()
{
    var result =
    {
        id:
        {
            propertyName:'Id',
            jsName:'id',
            displayName:'Id',
            displayFormat:'text',
            isHidden: true
            ,int:
            {
                shouldValidate:true
            }
        }
        ,userName:
        {
            propertyName:'UserName',
            jsName:'userName',
            displayName:'User Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,clientId:
        {
            propertyName:'ClientId',
            jsName:'clientId',
            displayName:'Client Id',
            displayFormat:'int'
            ,int:
            {
                shouldValidate:true
            }
        }
        ,firstName:
        {
            propertyName:'FirstName',
            jsName:'firstName',
            displayName:'First Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,lastName:
        {
            propertyName:'LastName',
            jsName:'lastName',
            displayName:'Last Name',
            displayFormat:'text'
            ,length:
            {
                shouldValidate:true
                ,min: 0
                ,max: 128
                ,message: '128 characters or less'
            }
            ,required:
            {
                shouldValidate:true
            }
        }
        ,roles:
        {
            propertyName:'Roles',
            jsName:'roles',
            displayName:'Roles',
            displayFormat:'text',
            doNotSort:true
        }
    };
    return result;
}

id? : number;
userName? : string;
clientId? : number;
firstName? : string;
lastName? : string;
roles? : string;
}

