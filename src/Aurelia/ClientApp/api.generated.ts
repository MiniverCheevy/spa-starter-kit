//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
import { HttpClient, HttpResponseMessage } from 'aurelia-http-client';
import { autoinject, inject } from "aurelia-framework";
import * as Models from "./models.generated";
import { MessengerService } from "./services/messenger-service";
import { EncoderService } from "./services/encoder-service";
import { AjaxService } from "./services/ajax-service";

@autoinject()
export class ApplicationSetting
{
    url: string = 'api/ApplicationSetting';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async delete (request: Models.IIdRequest):
    Promise<Models.IResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildDeleteRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}

public async put (request: Models.IApplicationSettingDetail):
Promise<Models.INewItemResponse>
{
    this.messenger.incrementHttpRequestCounter();
    var requestBuilder = await this.ajaxService.buildPutRequest(request, this.url);
    try {
    var response = await requestBuilder.send();
    this.messenger.decrementHttpRequestCounter();
    var out = <Models.IResponse>JSON.parse(response.response);
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    
    var result = {
    isOk: false,
    message: err.statusText
};

this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}

public async get (request: Models.IIdRequest):
Promise<Models.IResponseOfApplicationSettingDetail>
{
    this.messenger.incrementHttpRequestCounter();
    var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
    try {
    var response = await requestBuilder.send();
    this.messenger.decrementHttpRequestCounter();
    var out = <Models.IResponse>JSON.parse(response.response);
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    
    var result = {
    isOk: false,
    message: err.statusText
};

this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
}
@autoinject()
export class ApplicationSettingList
{
    url: string = 'api/ApplicationSettingList';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IApplicationSettingListRequest):
    Promise<Models.IApplicationSettingListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class CurrentUser
{
    url: string = 'api/CurrentUser';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IEmptyRequest):
    Promise<Models.IResponseOfAppPrincipal>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class ErrorDetail
{
    url: string = 'api/ErrorDetail';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IIdRequest):
    Promise<Models.IResponseOfErrorDetail>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class ErrorList
{
    url: string = 'api/ErrorList';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IErrorListRequest):
    Promise<Models.IErrorListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class Lists
{
    url: string = 'api/Lists';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IListsRequest):
    Promise<Models.IListsResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class Member
{
    url: string = 'api/Member';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async delete (request: Models.IIdRequest):
    Promise<Models.IResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildDeleteRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}

public async get (request: Models.IIdRequest):
Promise<Models.IResponseOfMemberDetail>
{
    this.messenger.incrementHttpRequestCounter();
    var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
    try {
    var response = await requestBuilder.send();
    this.messenger.decrementHttpRequestCounter();
    var out = <Models.IResponse>JSON.parse(response.response);
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    
    var result = {
    isOk: false,
    message: err.statusText
};

this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}

public async put (request: Models.IMemberDetail):
Promise<Models.INewItemResponse>
{
    this.messenger.incrementHttpRequestCounter();
    var requestBuilder = await this.ajaxService.buildPutRequest(request, this.url);
    try {
    var response = await requestBuilder.send();
    this.messenger.decrementHttpRequestCounter();
    var out = <Models.IResponse>JSON.parse(response.response);
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    
    var result = {
    isOk: false,
    message: err.statusText
};

this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
}
@autoinject()
export class MemberList
{
    url: string = 'api/MemberList';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IMemberListRequest):
    Promise<Models.IMemberListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class MobileError
{
    url: string = 'api/MobileError';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async post (request: Models.IMobileErrorRequest):
    Promise<Models.IResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildPostRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}
@autoinject()
export class UserDetail
{
    url: string = 'api/UserDetail';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async delete (request: Models.IIdRequest):
    Promise<Models.IResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildDeleteRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}

public async get (request: Models.IIdRequest):
Promise<Models.IResponseOfUserDetail>
{
    this.messenger.incrementHttpRequestCounter();
    var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
    try {
    var response = await requestBuilder.send();
    this.messenger.decrementHttpRequestCounter();
    var out = <Models.IResponse>JSON.parse(response.response);
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    
    var result = {
    isOk: false,
    message: err.statusText
};

this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}

public async put (request: Models.IUserDetail):
Promise<Models.INewItemResponse>
{
    this.messenger.incrementHttpRequestCounter();
    var requestBuilder = await this.ajaxService.buildPutRequest(request, this.url);
    try {
    var response = await requestBuilder.send();
    this.messenger.decrementHttpRequestCounter();
    var out = <Models.IResponse>JSON.parse(response.response);
    this.messenger.showResponseMessage(out);
    return out;
}
catch (err)
{
    this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
    
    var result = {
    isOk: false,
    message: err.statusText
};

this.messenger.decrementHttpRequestCounter();
this.messenger.showResponseMessage(result);
return result;
}
}
}
@autoinject()
export class UserList
{
    url: string = 'api/UserList';
    
    constructor(private ajaxService: AjaxService, private messenger:MessengerService)
    {
    }
    
    public async get (request: Models.IUserListRequest):
    Promise<Models.IUserListResponse>
    {
        this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.buildGetRequest(request, this.url);
        try {
        var response = await requestBuilder.send();
        this.messenger.decrementHttpRequestCounter();
        var out = <Models.IResponse>JSON.parse(response.response);
        this.messenger.showResponseMessage(out);
        return out;
    }
    catch (err)
    {
        this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
        
        var result = {
        isOk: false,
        message: err.statusText
    };
    
    this.messenger.decrementHttpRequestCounter();
    this.messenger.showResponseMessage(result);
    return result;
}
}
}

