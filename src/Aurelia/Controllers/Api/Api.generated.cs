/***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
***************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Voodoo;
using Fernweh;
using Voodoo.Messages;
using Fernweh.Infrastructure.ExecutionPipeline;
using Fernweh.Infrastructure.ExecutionPipeline.Models;
using Fernweh.Core.Operations.ApplicationSettings;
using Fernweh.Core.Operations.ApplicationSettings.Extras;
using Fernweh.Core.Operations.Users;
using Fernweh.Core.Operations.Users.Extras;
using Fernweh.Core.Operations.Lists;
using Fernweh.Core.Operations.Errors;
using Fernweh.Core.Operations.Errors.Extras;
using Fernweh.Core.Operations.CurrentUsers;
using Fernweh.Core.Identity;
namespace Fernweh.Controllers.Api
{
    [Route("api/[controller]")]
    public class ApplicationSettingDetailController : ApiControllerBase
    {
        [HttpPut]
        public async Task<NewItemResponse> Put
        ([FromBody] ApplicationSettingMessage request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <ApplicationSettingMessage, NewItemResponse>
            {
                Command = new ApplicationSettingSaveCommand(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<ApplicationSettingMessage, NewItemResponse>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class ApplicationSettingListController : ApiControllerBase
    {
        [HttpGet]
        public async Task<ApplicationSettingQueryResponse> Get
        ( ApplicationSettingQueryRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <ApplicationSettingQueryRequest, ApplicationSettingQueryResponse>
            {
                Command = new ApplicationSettingListQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<ApplicationSettingQueryRequest, ApplicationSettingQueryResponse>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class ApplicationSettingController : ApiControllerBase
    {
        [HttpGet]
        public async Task<Response<ApplicationSettingMessage>> Get
        ( IdRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <IdRequest, Response<ApplicationSettingMessage>>
            {
                Command = new ApplicationSettingDetailQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<IdRequest, Response<ApplicationSettingMessage>>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
        [HttpDelete]
        public async Task<Response> Delete
        ( IdRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <IdRequest, Response>
            {
                Command = new ApplicationSettingDeleteCommand(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<IdRequest, Response>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class UserDetailController : ApiControllerBase
    {
        [HttpDelete]
        public async Task<Response> Delete
        ( IdRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <IdRequest, Response>
            {
                Command = new UserDeleteCommand(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] { "Administrator" } }
            };
            var pipeline = new ExcecutionPipeline<IdRequest, Response>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
        [HttpGet]
        public async Task<Response<UserDetail>> Get
        ( IdRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <IdRequest, Response<UserDetail>>
            {
                Command = new UserDetailQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] { "Administrator" } }
            };
            var pipeline = new ExcecutionPipeline<IdRequest, Response<UserDetail>>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
        [HttpPut]
        public async Task<NewItemResponse> Put
        ([FromBody] UserDetail request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <UserDetail, NewItemResponse>
            {
                Command = new UserSaveCommand(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] { "Administrator" } }
            };
            var pipeline = new ExcecutionPipeline<UserDetail, NewItemResponse>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class UserListController : ApiControllerBase
    {
        [HttpGet]
        public async Task<UserQueryResponse> Get
        ( UserQueryRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <UserQueryRequest, UserQueryResponse>
            {
                Command = new UserListQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] { "Administrator" } }
            };
            var pipeline = new ExcecutionPipeline<UserQueryRequest, UserQueryResponse>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class ListsController : ApiControllerBase
    {
        [HttpGet]
        public async Task<ListsResponse> Get
        ( ListsRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <ListsRequest, ListsResponse>
            {
                Command = new LookupsQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<ListsRequest, ListsResponse>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class ErrorDetailController : ApiControllerBase
    {
        [HttpGet]
        public async Task<Response<ErrorDetail>> Get
        ( IdRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <IdRequest, Response<ErrorDetail>>
            {
                Command = new ErrorDetailQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<IdRequest, Response<ErrorDetail>>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class ErrorListController : ApiControllerBase
    {
        [HttpGet]
        public async Task<ErrorQueryResponse> Get
        ( ErrorQueryRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <ErrorQueryRequest, ErrorQueryResponse>
            {
                Command = new ErrorListQuery(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = false, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<ErrorQueryRequest, ErrorQueryResponse>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class MobileErrorController : ApiControllerBase
    {
        [HttpPost]
        public async Task<Response> Post
        ([FromBody] MobileErrorRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <MobileErrorRequest, Response>
            {
                Command = new MobileErrorAddCommand(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = true, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<MobileErrorRequest, Response>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
    
    [Route("api/[controller]")]
    public class CurrentUserController : ApiControllerBase
    {
        [HttpGet]
        public async Task<Response<AppPrincipal>> Get
        ( EmptyRequest request)
        {
            var state = new Infrastructure.ExecutionPipeline.Models.ExecutionState
            <EmptyRequest, Response<AppPrincipal>>
            {
                Command = new GetCurrentUserCommand(request),
                Context = HttpContext,
                ModelState = ModelState,
                Request = request,
                SecurityContext = new SecurityContext { AllowAnonymouse = true, Roles=new string[] {  } }
            };
            var pipeline = new ExcecutionPipeline<EmptyRequest, Response<AppPrincipal>>
            (state);
            await pipeline.ExecuteAsync();
            return state.Response;
        }
    }
}

