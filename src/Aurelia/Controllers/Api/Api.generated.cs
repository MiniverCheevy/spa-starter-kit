//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;

using Voodoo;
using Fernweh.Aurelia;
using Voodoo.Messages;
using Fernweh.Core.Operations.ApplicationSettings;
using Fernweh.Core.Operations.ApplicationSettings.Extras;
using Fernweh.Core.Operations.Users;
using Fernweh.Core.Operations.Users.Extras;
using Fernweh.Core.Operations.Lists;
using Fernweh.Core.Operations.Errors;
using Fernweh.Core.Operations.Errors.Extras;
using Fernweh.Core.Operations.CurrentUsers;
using Fernweh.Core.Identity;
namespace Fernweh.Aurelia.Controllers.Api
{
    [Route("api/[controller]")]
    public class ApplicationSettingDetailController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpPut]
        public async Task<NewItemResponse> Put
        ([FromBody] ApplicationSettingMessage request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<NewItemResponse>(ModelState);
            
            var op = new ApplicationSettingSaveCommand(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class ApplicationSettingListController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpGet]
        public async Task<ApplicationSettingQueryResponse> Get
        ( ApplicationSettingQueryRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<ApplicationSettingQueryResponse>(ModelState);
            
            var op = new ApplicationSettingListQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class ApplicationSettingController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpGet]
        public async Task<Response<ApplicationSettingMessage>> Get
        ( IdRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response<ApplicationSettingMessage>>(ModelState);
            
            var op = new ApplicationSettingDetailQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
        [CustomAuthorize]		[HttpDelete]
        public async Task<Response> Delete
        ( IdRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response>(ModelState);
            
            var op = new ApplicationSettingDeleteCommand(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class UserDetailController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpDelete]
        public async Task<Response> Delete
        ( IdRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response>(ModelState);
            
            var op = new UserDeleteCommand(request);
            var response = await op.ExecuteAsync();
            return response;
        }
        [CustomAuthorize]		[HttpGet]
        public async Task<Response<UserDetail>> Get
        ( IdRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response<UserDetail>>(ModelState);
            
            var op = new UserDetailQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
        [CustomAuthorize(Roles = "Administrator")]
        [HttpPut]
        public async Task<NewItemResponse> Put
        ([FromBody] UserDetail request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<NewItemResponse>(ModelState);
            
            var op = new UserSaveCommand(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class UserListController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpGet]
        public async Task<UserQueryResponse> Get
        ( UserQueryRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<UserQueryResponse>(ModelState);
            
            var op = new UserListQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class ListsController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpGet]
        public async Task<ListsResponse> Get
        ( ListsRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<ListsResponse>(ModelState);
            
            var op = new LookupsQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class ErrorDetailController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpGet]
        public async Task<Response<ErrorDetail>> Get
        ( IdRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response<ErrorDetail>>(ModelState);
            
            var op = new ErrorDetailQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class ErrorListController : ApiControllerBase
    {
        [CustomAuthorize]		[HttpGet]
        public async Task<ErrorQueryResponse> Get
        ( ErrorQueryRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<ErrorQueryResponse>(ModelState);
            
            var op = new ErrorListQuery(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class MobileErrorController : ApiControllerBase
    {
        [AllowAnonymous]		[HttpPost]
        public async Task<Response> Post
        ([FromBody] MobileErrorRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response>(ModelState);
            
            var op = new MobileErrorAddCommand(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
    [Route("api/[controller]")]
    public class CurrentUserController : ApiControllerBase
    {
        [AllowAnonymous]		[HttpGet]
        public async Task<Response<AppPrincipal>> Get
        ( EmptyRequest request)
        {
            if (request == null && ModelState.ErrorCount > 0)
            return ModelBinderResponseBuilder.BuildResponse<Response<AppPrincipal>>(ModelState);
            
            var op = new GetCurrentUserCommand(request);
            var response = await op.ExecuteAsync();
            return response;
        }
    }
    
}
