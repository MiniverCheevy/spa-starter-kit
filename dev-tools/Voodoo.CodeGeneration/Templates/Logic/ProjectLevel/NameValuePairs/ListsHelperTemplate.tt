<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************


<#foreach (var item in this.File.UsingStatements){#>
using <#=item#>;
<#}#>

namespace <#=this.File.Namespace#>
{
    public class <#=this.File.Name#>
    {

	 public async Task<List<IListItem>> GetList(<#=this.File.ContextName#> context, Lists list, bool includeInactive = false)
        {
			 var response = new List<IListItem>();
			 var items = new List<ListItem>();
			 IList<IListItem> enumItems = new List<IListItem>();    
			 Type enumType=null;
			         
				<#foreach (var item in this.File.NameValuePairTypes) {
					if (!item.IsEnum ) {#>
				if(list == Lists.<#=item.EntityType.Name#>)
				{
					var query<#=item.DbSet.Name#> = context.<#=item.DbSet.Name#>.AsNoTracking().AsQueryable();
					<#if (item.Facade.HasSortOrder) {#>
						query<#=item.DbSet.Name#>=query<#=item.DbSet.Name#>.OrderBy(c=>c.SortOrder).ThenBy(c=>c.Name);
					<#} else  {#>
						query<#=item.DbSet.Name#>=query<#=item.DbSet.Name#>.OrderBy(c=>c.Name);
					<#}#>
					<#if (item.Facade.HasActiveFlag) {#>
					if (!includeInactive)
						query<#=item.DbSet.Name#>=query<#=item.DbSet.Name#>.Where(c=>c.IsActive);
					<#}#>
					items = await query<#=item.DbSet.Name#>
						.Select (c=>new ListItem{Name = c.Name, Value=c.Id})
						.ToListAsync();
					
				}
					<# } else {#>
				if(list == Lists.<#=item.EntityType.Name#>)
				{
					enumType = typeof(<#=item.EntityType.FullName#>);
					enumItems = enumType.ToINameValuePairList().Select(c=>(IListItem)new ListItem { Name = c.Name, Value = c.Value.To<int>() }).ToList ();
					response.AddRange(enumItems);
				}
				<#}
			}#>

            response.AddRange(items);
	     return response;
        }

		public async Task<ListsResponse> GetLists(<#=this.File.ContextName#> context, ListsRequest request)
		{
			Type enumType=null;
			var response = new ListsResponse();
			var items = new List<ListItem>();
			 IList<IListItem> enumItems = new List<IListItem>();
			<#foreach (var item in this.File.NameValuePairTypes) {#>
				if(request.Lists.Contains(Lists.<#=item.EntityType.Name#>))
				{
				<#if (!item.IsEnum ) {#>
					var query<#=item.DbSet.Name#> = context.<#=item.DbSet.Name#>.AsNoTracking().AsQueryable();
					<#if (item.Facade.HasSortOrder) {#>
						query<#=item.DbSet.Name#>=query<#=item.DbSet.Name#>.OrderBy(c=>c.SortOrder).ThenBy(c=>c.Name);
					<#} else {#>
						query<#=item.DbSet.Name#>=query<#=item.DbSet.Name#>.OrderBy(c=>c.Name);
					<#}#>
					<#if (item.Facade.HasActiveFlag) {#>
					if (!request.IncludeInactive)
						query<#=item.DbSet.Name#>=query<#=item.DbSet.Name#>.Where(c=>c.IsActive);
					<#}#>
					items = await query<#=item.DbSet.Name#>
						.Select (c=>new ListItem{Name = c.Name, Value=c.Id})
						.ToListAsync();
					response.<#=item.PluralName#>.AddRange(items);
				<# } else {#>

					enumType = typeof(<#=item.EntityType.FullName#>);
					enumItems = enumType.ToINameValuePairList().Select(c=>(IListItem)new ListItem { Name = c.Name, Value = c.Value.To<int>() }).ToList ();
					response.<#=item.PluralName#>.AddRange(enumItems);
				
			<#}#>}
			<#}#>

			return response;
		}
    }
}