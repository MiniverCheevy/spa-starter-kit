<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Voodoo;
using Voodoo.Messages;
using Voodoo.Operations;
using Voodoo.Operations.Async;
using Voodoo.Validation.Infrastructure;
using System.Data.Entity;
<#foreach (var item in this.File.UsingStatements){#>
using <#=item#>; 
<#}#>
namespace <#=this.File.Namespace#>
{
	[Rest(Verb.Put, RestResources.<#=this.File.Type.Name#>Detail)]
    public class <#=this.File.Name#> :CommandAsync<<#=this.File.Type.DetailQueryMessageName#>, NewItemResponse>
    {
  
		protected bool isNew;
		<#if(this.File.HasContext){#>
protected <#=this.File.ContextName#> context;
		<#}#>
		protected IValidator validator = ValidationManager.GetDefaultValidatitor();
        public <#=this.File.Name#>(<#=this.File.Type.DetailQueryMessageName#> request) : base(request)
        {
        }      	  

		protected override async Task<NewItemResponse> ProcessRequestAsync()
        {

			//The request object is validated by default, validate anything else with
            //validator.Validate(<something>);
			
            <#if(this.File.HasContext && this.File.Type.HasId){#>
			using(context = IOC.GetContext())
			{
				 var model = await createOrGetExisting();
				 model.ThrowIfNull(<#=this.File.Type.Name#>Messages.NotFound);
				
				model.UpdateFrom(request);
				await context.SaveChangesAsync();

                response.NewItemId = model.Id;
			}
			<#}#>
			response.Message = isNew ? <#=this.File.Type.Name#>Messages.AddOk:<#=this.File.Type.Name#>Messages.UpdateOk;
			return response;
        }
		protected async Task<<#=this.File.Type.Name#>> createOrGetExisting()
		{
			if (request.Id == 0)
			{
				isNew=true;
				var model = new <#=this.File.Type.Name#>();
				context.<#=this.File.Type.PluralName#>.Add(model);
				return model;
			}
			else
			{				
				return await context.<#=this.File.Type.PluralName#>
									.FirstOrDefaultAsync(c=>c.Id == request.Id);
			}
		}
    }
}
