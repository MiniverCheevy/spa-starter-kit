using System;
using System.Collections.Generic;
using System.Text;
using Voodoo.CodeGeneration.Helpers;
using Voodoo.CodeGeneration.Models;
using Voodoo.CodeGeneration.Models.Reflection;
using Voodoo.CodeGeneration.Models.VisualStudio;

namespace Voodoo.CodeGeneration.Templates.Logic.OperationLevel.Extras
{
    public class MapperFile : TypedCodeFile
    {
        private MappingFactory.Mapping map;

        public MapperFile(ProjectFacade project, TypeFacade type, MappingFactory.Mapping map)
            : base(project, type)
        {
            this.map = map;
            OverwriteExistingFile = true;

            Name = $"{Name}Extensions";
            PageSpecificUsingStatements.Add(type.SystemType.Namespace);
            PageSpecificUsingStatements.Add(map.Namespace);
            PageSpecificUsingStatements.Add(
                $"{Vs.Helper.Solution.DataProject.RootNamespace}.Operations.{type.PluralName}.Extras");
        }
        public override string GetFolder()
        {
            return $@"Models\Mappings";
        }
        public override string FileName => $"{map.ModelTypeName}Extensions.{map.MessageTypeName}.Mapping.generated.cs";

        public override string GetFileContents()
        {
            var output = new StringBuilder();
            output.AppendLine(@"
//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//*************************************************************** ");
            foreach (var item in UsingStatements)
            {
                output.AppendLine($"using {item};");
            }
            output.AppendLine($"namespace {Namespace}");
            output.AppendLine("{");
            output.AppendLine($"public static partial class {Name}");
            output.AppendLine("{");
            output.AppendLine($"private static {map.MessageTypeName} to{map.MessageTypeName}({map.ModelTypeName} model, {map.MessageTypeName} message)");
            output.AppendLine("{");
            foreach (var item in map.Properties)
            {
                output.AppendLine($"message.{item.Name} = model.{item.Name};");
            }
            output.AppendLine("return message;");
            output.AppendLine("}");
            output.AppendLine($"public static {map.ModelTypeName} updateFrom{map.MessageTypeName}({map.MessageTypeName} message, {map.ModelTypeName} model)");
            output.AppendLine("{");
            foreach (var item in map.PropertiesWithoutId)
            {
                output.AppendLine($"model.{item.Name}=message.{item.Name};");
            }
            output.AppendLine("return model;");
            output.AppendLine("}");
            output.AppendLine("}");
            output.AppendLine("}");

            return output.ToString();
        }
    }
}
