<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Voodoo;
using Voodoo.Messages;
using Voodoo.Operations;
using Voodoo.Operations.Async;
using Voodoo.Validation.Infrastructure;

using System.Data.Entity;

<#foreach (var item in this.File.UsingStatements){#>
using <#=item#>; 
<#}#>
namespace <#=this.File.Namespace#>
{
	[Rest(Verb.Post, RestResources.<#=this.File.Type.Name#>)]
    public class <#=this.File.Name#> :CommandAsync<<#=this.File.Type.DetailQueryMessageName#>, NewItemResponse>
    {
 
		<#if(this.File.HasContext){#>
protected <#=this.File.ContextName#> context;
		<#}#>
		protected IValidator validator = ValidationManager.GetDefaultValidatitor();

        public <#=this.File.Name#>(<#=this.File.Type.DetailQueryMessageName#> request) : base(request)
        {
        }
       
		protected override async Task<NewItemResponse> ProcessRequestAsync()
        {
			//The request object is validated by default, validate anything else with
            //request.<Something>.Validate();

			var model = new <#=this.File.Type.Name#>();
            <#if(this.File.HasContext){#>
using(context = IOC.GetContext())
			{
				model.UpdateFrom(request);
				context.<#=this.File.Type.PluralName#>.Add(model);
				response.NumberOfRowsEffected = await context.SaveChangesAsync();
			}
			<#}
			var idRow = this.File.Type.HasId ? "response.NewItemId = model.Id;" : "//response.NewItemId = model.Id;";
			#>
<#=idRow#>
			response.Message = <#=this.File.Type.Name#>Messages.AddOk;
			return response;
        }
    }
}
