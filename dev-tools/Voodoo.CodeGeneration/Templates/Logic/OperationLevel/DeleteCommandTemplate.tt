<#@ template language="C#"  linePragmas="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#foreach (var item in this.File.UsingStatements){#>
using <#=item#>; 
<#}#>
namespace <#=this.File.Namespace#>
{
	[Rest(Verb.Delete, RestResources.<#=this.File.Type.Name#>)]
    public class <#=this.File.Name#> :CommandAsync<IdRequest,Response>
    {
  
		<#if(this.File.HasContext){#>
protected <#=this.File.ContextName#> context;
		<#}#>
		protected IValidator validator = ValidationManager.GetDefaultValidatitor();

        public <#=this.File.Name#>(IdRequest request) : base(request)
        {
        }
       
		protected override async Task<Response> ProcessRequestAsync()
        {
			
            <#if(this.File.HasContext && this.File.UseSoftDelete && this.File.Type.HasId){#>
			using(context = IOC.GetContext())
			{
				var model = await context.<#=this.File.Type.PluralName#>
									.FirstOrDefaultAsync(c=>c.Id == request.Id);

				if (model == null)
					throw new Exception(<#=this.File.Type.Name#>Messages.NotFound);

				model.IsActive = false;
				response.NumberOfRowsEffected = await context.SaveChangesAsync();
			}
			<#}#>

			<#if(this.File.HasContext && !this.File.UseSoftDelete && this.File.Type.HasId){#>
using(context = IOC.GetContext()){
				var model = await context.<#=this.File.Type.PluralName#>
									.FirstOrDefaultAsync(c=>c.Id == request.Id);

				if (model == null)
					throw new Exception(<#=this.File.Type.Name#>Messages.NotFound);

				context.<#=this.File.Type.PluralName#>.Remove(model);
				 response.NumberOfRowsEffected = await context.SaveChangesAsync();
			}
			<#}#>
			response.Message = <#=this.File.Type.Name#>Messages.DeleteOk;
			return response;
        }
    }
}
