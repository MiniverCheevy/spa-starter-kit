<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Cache;
using System.Text;
using System.Threading.Tasks;
using Voodoo;
using Voodoo.Messages;
<#foreach (var item in this.File.UsingStatements){#>
using <#=item#>;
<#}#>

namespace <#=this.File.Namespace#>
{
    <#=this.File.Tests.ClassLevelAttribute#>
    public class <#=this.File.Name#> 
    {

		<#=this.File.Tests.TestLevelAttribute#> 
        public async Task <#=this.File.Type.Name#>DetailQuery_ValidRequest_IsOk()
        {
			<# if (this.File.Type.HasId) {#>

			int? id = 0;
			using (var context = IOC.GetContext())
			{
				if (context.<#=this.File.Type.PluralName#>.Any())
				id = context.<#=this.File.Type.PluralName#>.Max(c => c.Id);
			}
			id.Should().HaveValue().Should().NotBe(0, 
					"No data in <#=this.File.Type.Name#> table");
            var request = new IdRequest{Id = id.Value};
            var response = await new <#=this.File.Type.Name#>DetailQuery(request).ExecuteAsync();
            response.Details.Should().BeEmpty();
            response.Message.Should().BeNull();
            response.IsOk.Should().BeTrue();
		    response.Data.Should().NotBeNull();

			<#}#>
        }
		 public <#=this.File.Type.Name#>QueryRequest getValidRequest()
        {
            return new <#=this.File.Type.Name#>QueryRequest();
        }

		<#=this.File.Tests.TestLevelAttribute#> 
        public async Task <#=this.File.Type.Name#>ListQuery_ValidRequest_IsOk()
        {
            var request = getValidRequest();
            var response = await new <#=this.File.Type.Name#>ListQuery(request).ExecuteAsync();
            response.Details.Should().BeEmpty();
            response.Message.Should().BeNull();
            response.IsOk.Should().BeTrue();
            response.Data.Should().NotBeNull();
		    response.Data.Should().NotBeEmpty();
        }
    }
}
