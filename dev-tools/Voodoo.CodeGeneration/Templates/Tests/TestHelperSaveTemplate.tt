<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Cache;
using System.Text;
using System.Threading.Tasks;

using Voodoo;
using Voodoo.Messages;
<#foreach (var item in this.File.UsingStatements){#>
using <#=item#>; 
<#}#>
namespace <#=this.File.Namespace#>
{

    <#=this.File.Tests.ClassLevelAttribute#>
    public class <#=this.File.Name#> 
    {
         public static <#=this.File.Type.DetailQueryMessageName#> GetNew<#=this.File.Type.Name#>()
        {
            var request= new <#=this.File.Type.DetailQueryMessageName#>();
			TestHelper.Randomizer.Randomize(request);
			return request;						
        }

		public static async Task<<#=this.File.Type.DetailQueryMessageName#>> GetExisting<#=this.File.Type.Name#>()
        {
            var request= GetNew<#=this.File.Type.Name#>();			
			var command = new <#=this.File.Type.Name#>SaveCommand(request);
            var response = await command.ExecuteAsync();

            response.Details.Should().BeEmpty();
            response.Message.Should().Be(<#=this.File.Type.Name#>Messages.AddOk);
            response.IsOk.Should().BeTrue();
		    response.NewItemId.Should().NotBe(0);
			
			var query = new <#=this.File.Type.Name#>DetailQuery(new IdRequest{Id =response.NewItemId});
			var data= await query.ExecuteAsync();
			return data.Data;			
        }
    }
}
