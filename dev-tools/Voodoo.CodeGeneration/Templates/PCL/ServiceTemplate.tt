<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
//***************************************************************
using System;
using System.Collections.Generic;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Voodoo;
using Voodoo.Messages;
using Voodoo.Operations;
using Newtonsoft.Json;
using Nsrp.Mobile;
using System.Net.Http;
using Nsrp.Mobile.Helpers;

namespace Shared 
{
public class <#=File.Name#>
{
<#foreach(var verb in File.Resource.Verbs) {#>
		public async Task<<#=verb.ResponseTypeName#>> <#=verb.Name#>(<#=verb.RequestTypeName#> request)
        {
            var response = new <#=verb.ResponseTypeName#>();
            try
            {

				var url = $@"{IOC.ApiUrl}/<#=File.Resource.Name#>";   

				HttpRequestMessage message = null;
                var method = HttpMethod.<#=verb.Name#>;
                if (method == HttpMethod.Get)
                {
                    url = url.AddRequestToGetUrl(request);
                    message = new HttpRequestMessage(HttpMethod.Get, new Uri(url));
                }
                else
                {
                    var json = JsonConvert.SerializeObject(request);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");
                    message = new HttpRequestMessage { Content = content, Method = method, RequestUri = new Uri(url) };
                }                






				using (var handler = new HttpClientHandler() { CookieContainer = IOC.CookieJar })
				{
					using (var client = IOC.GetClient(handler))
					{
						 var restResponse = await client.SendAsync(message);
						 IOC.HandleRawResponse(restResponse);
						if (restResponse.StatusCode != HttpStatusCode.OK)
						{
							response.IsOk = false;
							response.Message = $"{restResponse.StatusCode}";// {restResponse.ErrorMessage} {restResponse.ErrorException.ToString()}";
							IOC.GetLogger().Log(restResponse.ToDebugString());
						}
						else
						{
							var responseJson = await restResponse.Content.ReadAsStringAsync();
							response =  JsonConvert.DeserializeObject<<#=verb.ResponseTypeName#>>(responseJson);
						}
                    
					}
				}     
               
                return response;
            }
            catch (Exception ex)
            {
                ex.Data.Add("Request", request.ToCode());             
                IOC.GetLogger().Log(ex);
                response.SetExceptions(ex);
                return response;
            }
        }
		<#}#>
	}
}