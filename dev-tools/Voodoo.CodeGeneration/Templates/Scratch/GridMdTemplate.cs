// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace Voodoo.CodeGeneration.Templates.Scratch
{
    /// <summary>
    ///     Class to produce the template output
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class GridMdTemplate : GridMdTemplateBase
    {
        /// <summary>
        ///     Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write("<div ng-controller=\"userController\">\r\n    <h2>Users</h2>\r\n    <form name=\"userGri" +
                  "dForm\">\r\n        <div class=\"gridShell\">\r\n            <div layout=\"row\">\r\n      " +
                  "          <div flex=\"10\">\r\n                    <md-button class=\"md-raised md-bu" +
                  "tton md-default-theme\" ui-sref=\"users.add\">Add</md-button>\r\n                </di" +
                  "v>\r\n                <div flex></div>\r\n                <div layout=\"row\">\r\n      " +
                  "              <md-input-container>\r\n                        <input type=\"text\"\r\n" +
                  "                               autofocus=\"autofocus\"\r\n                          " +
                  "     ng-model=\"gridState.searchText\" placeholder=\"Search\" />\r\n                  " +
                  "  </md-input-container>\r\n                    <md-button type=\"submit\" class=\"md-" +
                  "button md-icon-button\" ng-click=\"search()\">\r\n                        <i class=\"m" +
                  "aterial-icons\">&#xE8B6;</i>\r\n                    </md-button>\r\n                <" +
                  "/div>\r\n            </div>\r\n        </div>\r\n        <div style=\"height: 460px;\">\r" +
                  "\n            <span ng-cloak class=\"text-danger\">{{error}}</span>\r\n            <t" +
                  "able class=\"table table-striped table-bordered table-condensed grid\">\r\n         " +
                  "       <thead>\r\n                    <tr>\r\n                        <th class=\"but" +
                  "tons\"></th>\r\n                        <th>\r\n                            <v-sorter" +
                  " text=\"Email\" member=\"UserName\"\r\n                                      grid-stat" +
                  "e=\"gridState\"\r\n                                      onsort=\"refresh()\">\r\n      " +
                  "                      </v-sorter>\r\n                        </th>\r\n              " +
                  "          <th>\r\n                            <v-sorter text=\"First Name\" member=\"" +
                  "FirstName\"\r\n                                      grid-state=\"gridState\"\r\n      " +
                  "                                onsort=\"refresh()\">\r\n                           " +
                  " </v-sorter>\r\n                        </th>\r\n                        <th>\r\n     " +
                  "                       <v-sorter text=\"Last Name\" member=\"LastName\"\r\n           " +
                  "                           grid-state=\"gridState\"\r\n                             " +
                  "         onsort=\"refresh()\">\r\n                            </v-sorter>\r\n         " +
                  "               </th>\r\n                        <th>\r\n                            " +
                  "<span>\r\n                                Roles\r\n                            </spa" +
                  "n>\r\n                        </th>\r\n                    </tr>\r\n                </" +
                  "thead>\r\n                <tbody>\r\n                    <tr data-ng-repeat=\"item in" +
                  " data\">\r\n                        <td class=\"buttons\">\r\n                         " +
                  "   <a class=\"md-icon icon-button\"\r\n                               ui-sref=\"users" +
                  ".update({id:item.id})\">\r\n                                <i class=\"material-icon" +
                  "s\">&#xE254;</i>\r\n                            </a>                           \r\n  " +
                  "                      </td>\r\n                        <td>{{item.userName}}</td>\r" +
                  "\n                        <td>{{item.firstName}} </td>\r\n                        <" +
                  "td>{{item.lastName}}</td>\r\n                        <td>{{item.rolesDescription}}" +
                  "</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>" +
                  "\r\n        </div>\r\n        <div class=\"pull-left\">\r\n            <v-pager grid-sta" +
                  "te=\"gridState\"\r\n                     request-refresh=\"refresh()\">\r\n            <" +
                  "/v-pager>\r\n        </div>\r\n    </form>\r\n</div>\r\n");
            return GenerationEnvironment.ToString();
        }
    }

    #region Base class

    /// <summary>
    ///     Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class GridMdTemplateBase
    {
        #region Fields

        private StringBuilder generationEnvironmentField;
        private CompilerErrorCollection errorsField;
        private List<int> indentLengthsField;
        private bool endsWithNewline;

        #endregion

        #region Properties

        /// <summary>
        ///     The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if (generationEnvironmentField == null)
                    generationEnvironmentField = new StringBuilder();
                return generationEnvironmentField;
            }
            set => generationEnvironmentField = value;
        }

        /// <summary>
        ///     The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if (errorsField == null)
                    errorsField = new CompilerErrorCollection();
                return errorsField;
            }
        }

        /// <summary>
        ///     A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> indentLengths
        {
            get
            {
                if (indentLengthsField == null)
                    indentLengthsField = new List<int>();
                return indentLengthsField;
            }
        }

        /// <summary>
        ///     Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent { get; private set; } = "";

        /// <summary>
        ///     Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session { get; set; }

        #endregion

        #region Transform-time helpers

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
                return;
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (GenerationEnvironment.Length == 0
                || endsWithNewline)
            {
                GenerationEnvironment.Append(CurrentIndent);
                endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine, StringComparison.CurrentCulture))
                endsWithNewline = true;
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if (CurrentIndent.Length == 0)
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine, Environment.NewLine + CurrentIndent);
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (endsWithNewline)
                GenerationEnvironment.Append(textToAppend, 0, textToAppend.Length - CurrentIndent.Length);
            else
                GenerationEnvironment.Append(textToAppend);
        }

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            endsWithNewline = true;
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }

        /// <summary>
        ///     Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }

        /// <summary>
        ///     Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if (indent == null)
                throw new ArgumentNullException("indent");
            CurrentIndent = CurrentIndent + indent;
            indentLengths.Add(indent.Length);
        }

        /// <summary>
        ///     Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            var returnValue = "";
            if (indentLengths.Count > 0)
            {
                var indentLength = indentLengths[indentLengths.Count - 1];
                indentLengths.RemoveAt(indentLengths.Count - 1);
                if (indentLength > 0)
                {
                    returnValue = CurrentIndent.Substring(CurrentIndent.Length - indentLength);
                    CurrentIndent = CurrentIndent.Remove(CurrentIndent.Length - indentLength);
                }
            }
            return returnValue;
        }

        /// <summary>
        ///     Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            indentLengths.Clear();
            CurrentIndent = "";
        }

        #endregion

        #region ToString Helpers

        /// <summary>
        ///     Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider formatProviderField = CultureInfo.InvariantCulture;

            /// <summary>
            ///     Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get => formatProviderField;
                set
                {
                    if (value != null)
                        formatProviderField = value;
                }
            }

            /// <summary>
            ///     This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null)
                    throw new ArgumentNullException("objectToConvert");
                var t = objectToConvert.GetType();
                var method = t.GetMethod("ToString", new[]
                {
                    typeof(IFormatProvider)
                });
                if (method == null)
                    return objectToConvert.ToString();
                return (string) method.Invoke(objectToConvert, new object[]
                {
                    formatProviderField
                });
            }
        }

        /// <summary>
        ///     Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper { get; } = new ToStringInstanceHelper();

        #endregion
    }

    #endregion
}