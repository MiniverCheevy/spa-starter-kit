// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

namespace Voodoo.CodeGeneration.Templates.Web.ProjectLevel
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;

    /// <summary>
    /// Class to produce the template output
    /// </summary>
#line 1 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class ApiControllerTemplate : ApiControllerTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;

using Voodoo;
");

#line 20 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
            foreach (var item in this.File.UsingStatements)
            {
#line default
#line hidden
                this.Write("using ");

#line 21 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(item));

#line default
#line hidden
                this.Write(";\r\n");

#line 22 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
            }

#line default
#line hidden
            this.Write("namespace ");

#line 23 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.File.Namespace));

#line default
#line hidden
            this.Write("\r\n{\r\n");

#line 25 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
            foreach (var resource in this.File.Resources)
            {
#line default
#line hidden
                this.Write("\r\n    [Route(\"api/[controller]\")]\r\n\tpublic class ");

#line 28 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(resource.Name));

#line default
#line hidden
                this.Write("Controller : ApiControllerBase\r\n\t{\r\n\t\t");

#line 30 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                foreach (var verb in resource.Verbs)
                {
#line default
#line hidden
                    this.Write("\t\t");

#line 31 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    if (verb.RoleString != null)
                    {
#line default
#line hidden
                        this.Write("\t\t[CustomAuthorize(Roles = \"");

#line 32 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                        this.Write(this.ToStringHelper.ToStringWithCulture(verb.RoleString));

#line default
#line hidden
                        this.Write("\")]\r\n\t\t");

#line 33 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    }
                    else if (verb.AllowAnonymous)
                    {
#line default
#line hidden
                        this.Write("\t\t[AllowAnonymous]");

#line 34 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    }
                    else
                    {
#line default
#line hidden
                        this.Write("\t\t[CustomAuthorize]");

#line 36 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    }

#line default
#line hidden
                    this.Write("\t\t");

#line 37 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.Attribute));

#line default
#line hidden
                    this.Write("\r\n\t\tpublic async Task<");

#line 38 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.ResponseTypeName));

#line default
#line hidden
                    this.Write("> ");

#line 38 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.Name));

#line default
#line hidden
                    this.Write("\r\n\t\t\t(");

#line 39 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.Parameter));

#line default
#line hidden
                    this.Write(" ");

#line 39 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.RequestTypeName));

#line default
#line hidden
                    this.Write(
                        " request)\r\n\t\t\t{\r\n\t\t\t  if (request == null && ModelState.ErrorCount > 0)\r\n        " +
                        "        return ModelBinderResponseBuilder.BuildResponse<");

#line 42 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.ResponseTypeName));

#line default
#line hidden
                    this.Write(">(ModelState);\r\n\r\n\t\t\t\tvar op = new ");

#line 44 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                    this.Write(this.ToStringHelper.ToStringWithCulture(verb.OperationTypeName));

#line default
#line hidden
                    this.Write(
                        "(request);\r\n\t\t\t\tvar response = await op.ExecuteAsync();\r\n\t\t\t\treturn response;\r\n\t\t" +
                        "\t}\r\n");

#line 48 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
                }

#line default
#line hidden
                this.Write("\t}\r\n\r\n");

#line 51 "C:\Dev\NSRP.2\Voodoo.CodeGeneration\Templates\Web\ProjectLevel\ApiControllerTemplate.tt"
            }

#line default
#line hidden
            this.Write("}");
            return this.GenerationEnvironment.ToString();
        }
    }

#line default
#line hidden

    #region Base class

    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class ApiControllerTemplateBase
    {
        #region Fields

        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;

        #endregion

        #region Properties

        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set { this.generationEnvironmentField = value; }
        }

        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }

        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }

        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get { return this.currentIndentField; }
        }

        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get { return this.sessionField; }
            set { this.sessionField = value; }
        }

        #endregion

        #region Transform-time helpers

        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0)
                 || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine,
                (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0,
                    (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }

        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }

        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }

        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }

        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }

        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField =
                        this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }

        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }

        #endregion

        #region ToString Helpers

        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField =
                global::System.Globalization.CultureInfo.InvariantCulture;

            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get { return this.formatProviderField; }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField = value;
                    }
                }
            }

            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[]
                {
                    typeof(System.IFormatProvider)
                });
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string) (method.Invoke(objectToConvert, new object[]
                    {
                        this.formatProviderField
                    })));
                }
            }
        }

        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();

        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get { return this.toStringHelperField; }
        }

        #endregion
    }

    #endregion
}