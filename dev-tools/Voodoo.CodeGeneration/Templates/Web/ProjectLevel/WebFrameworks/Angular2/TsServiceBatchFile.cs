using System.Linq;
using System.Text;
using Voodoo.CodeGeneration.Helpers;
using Voodoo.CodeGeneration.Models.Rest;
using Voodoo.CodeGeneration.Models.VisualStudio;

namespace Voodoo.CodeGeneration.Templates.Web.ProjectLevel.WebFrameworks.Angular2
{

    public class TsServiceBatchFile : TypeScriptServiceBatchFileBase
    {
        public override string FileName => "api.generated.ts";


        public TsServiceBatchFile(ProjectFacade project, Resource[] resources, string path)
            : base(project, resources, path)
        {

        }

        public override string GetFileContents()
        {
            var output = new StringBuilder();
            output.AppendLine(@"//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
import * as Models from './models.generated';
import { MessengerService }
from './services/messenger-service';
import { EncoderService }
from './services/encoder-service';
import { AjaxService }
from './services/ajax-service';
import { Injectable }   from '@angular/core';            ");

            foreach (var resource in Resources)
            {
                output.AppendLine("@Injectable()");

                output.AppendLine($"export class {resource.Name}");
                output.AppendLine("{");
                output.AppendLine($"url: string = 'api/{resource.Name}';");
                output.AppendLine("constructor(private ajaxService: AjaxService, private messenger:MessengerService)");
                output.AppendLine("{");
                output.AppendLine("}");

                foreach (var verb in resource.Verbs)
                {
                    var declarations = Builder.AddTypes(verb.RequestType, verb.ResponseType);
                    output.AppendLine($"public async {verb.Name.ToLower()} (request: Models.{declarations.RequestDeclaration}):");
                    output.AppendLine($"Promise<Models.{declarations.ResponseDeclaration}>");
                    output.AppendLine("{");
                    addMethodBody(output, verb);
                    output.AppendLine("}");
                }
                output.AppendLine("}");
            }
            addProviders(output);

            return CodeFormatter.Format(output.ToString());
        }

        private static void addMethodBody(StringBuilder output, RestMethod verb)
        {
            output.AppendLine($"this.messenger.incrementHttpRequestCounter();");            
            output.AppendLine("try {");
            output.AppendLine($"var response = await this.ajaxService.build{verb.Name}Request(request, this.url);");
            output.AppendLine("this.messenger.decrementHttpRequestCounter();");
            output.AppendLine("var out = <any>response;");
            output.AppendLine("this.messenger.showResponseMessage(out);");
            output.AppendLine("return out;");
            output.AppendLine("}");
            output.AppendLine("catch (err)");
            output.AppendLine("{");
            output.AppendLine("var message = err.statusText || err.message;");
            output.AppendLine("this.ajaxService.logError(err, this.url, (<any>new Error()).stack);");
            output.AppendLine("    var result = {");
            output.AppendLine("isOk: false,");
            output.AppendLine("message: message");
            output.AppendLine("};");
            output.AppendLine("this.messenger.decrementHttpRequestCounter();");
            output.AppendLine("this.messenger.showResponseMessage(result);");
            output.AppendLine("return result;");
            output.AppendLine("}");
        }
        private void addProviders(StringBuilder output)
        {
            output.AppendLine("export const providers =[");
            var last = Resources.Last();
            foreach (var r in Resources)
            {
                output.Append(r.Name);
                output.AppendLine(r != last ? "," : "");
            }
            output.AppendLine("];");
        }
    }
}