<#@ template language="C#"  linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
import * as Models from "./models.generated";
import { MessengerService } from "./services/messenger-service";
import { EncoderService } from "./services/encoder-service";
import { AjaxService } from "./services/ajax-service";



<# foreach (var resource in File.Resources)
{#>

	export class <#=resource.Name #>
	{
		url: string = 'api/<#=resource.Name #>';

		constructor(private ajaxService: AjaxService, private messenger:MessengerService)
		{
		}

<# 			
			foreach(var verb in resource.Verbs) {
			var declarations = File.Builder.AddTypes(verb.RequestType, verb.ResponseType);#>

			public async <#=verb.Name.ToLower()#> (request: Models.<#=declarations.RequestDeclaration#>):
											Promise<Models.<#=declarations.ResponseDeclaration#>>
			{

			this.messenger.incrementHttpRequestCounter();
        var requestBuilder = await this.ajaxService.build<#=verb.Name#>Request(request, this.url);
        try {
            var response = await requestBuilder.send();
            this.messenger.decrementHttpRequestCounter();
            var out = <Models.IResponse>JSON.parse(response.response);
            this.messenger.showResponseMessage(out);
            return out;
        }
        catch (err)
        {
            
            this.ajaxService.logError(err, this.url, (<any>new Error()).stack);
           
            var result = {
                isOk: false,
                message: err.statusText
            };
           
            this.messenger.decrementHttpRequestCounter();
            this.messenger.showResponseMessage(result);
            return result;
        }
		}
	<#}#>
	}
	<#}#>