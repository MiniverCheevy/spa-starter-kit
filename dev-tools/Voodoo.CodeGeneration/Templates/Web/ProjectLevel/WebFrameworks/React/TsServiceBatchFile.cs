using System.Text;
using Voodoo.CodeGeneration.Models.Rest;
using Voodoo.CodeGeneration.Models.VisualStudio;

namespace Voodoo.CodeGeneration.Templates.Web.ProjectLevel.WebFrameworks.React
{
    public class TsServiceBatchFile : TypeScriptServiceBatchFileBase
    {
        public override string FileName => "api.generated.ts";

        public TsServiceBatchFile(ProjectFacade project, Resource[] resources, string path)
            : base(project, resources, path)
        {
        }

        public override string GetFileContents()
        {
            var builder = new StringBuilder();

            builder.Append(@"//***************************************************************
//This code just called you a tool
//What I meant to say is that this code was generated by a tool
//so don't mess with it unless you're debugging
//subject to change without notice, might regenerate while you're reading, etc
//***************************************************************
import { CurrentUserService } from './services/current-user-service';
import { MessengerService } from './services/messenger-service';
import { AjaxService } from './services/ajax-service';
import * as Models from './models.generated';");

            foreach (var resource in Resources)
            {
                builder.AppendLine();
                builder.Append($@" export class {resource.Name}Prototype    {{
                    url: string = 'api/{resource.Name}';");

                foreach (var verb in resource.Verbs)
                {
                    var declarations = Builder.AddTypes(verb.RequestType, verb.ResponseType);
                    builder.Append($@"   
			public async {verb.Name.ToLower()} (request: Models.{declarations.RequestDeclaration}):
											Promise<Models.{declarations.ResponseDeclaration}>
			{{
            var result;
            try {{
			        MessengerService.incrementHttpRequestCounter();
                    var response = await AjaxService.build{verb.Name}Request(request, this.url)
                     if (response.isOk != undefined) {{
                var out = <Models.IResponse>response;
                result = out;
            }}
            else {{
                AjaxService.logError(response, this.url, (< any > new Error()).stack);

                var errorResposne = {{
                    isOk: false,
                    message: response.statusText || response.message
                }};
                result = out;
            }}
        }}
        catch (e)
        {{
            AjaxService.logError(e, this.url, (< any > new Error()).stack);

            result = {{
                isOk: false,
                message: e.statusText || e.message
            }};            
        }}
        MessengerService.decrementHttpRequestCounter();
        MessengerService.showResponseMessage(result);
        return result;
}}");
                }
                builder.AppendLine("}");
                builder.AppendLine($"export const {resource.Name} = new {resource.Name}Prototype();");
            }
            return builder.ToString();
        }
    }
}